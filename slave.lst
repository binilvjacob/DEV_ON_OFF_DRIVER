CCS PCM C Compiler, Version 5.015, 5967               30-Apr-22 22:42

               Filename:   D:\namami-li\LiHome\MOSFET DRIVER pic code\SLAVE 684 - modified retransmision - for testing\slave.lst

               ROM used:   1876 words (92%)
                           Largest free fragment is 172
               RAM used:   70 (55%) at main() level
                           87 (68%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  06
0001:  MOVWF  0A
0002:  GOTO   62D
0003:  NOP
0004:  BTFSC  03.5
0005:  GOTO   00A
0006:  MOVWF  24
0007:  SWAPF  03,W
0008:  MOVWF  25
0009:  GOTO   00F
000A:  BCF    03.5
000B:  MOVWF  24
000C:  SWAPF  03,W
000D:  MOVWF  25
000E:  BSF    25.1
000F:  MOVF   0A,W
0010:  MOVWF  2B
0011:  CLRF   0A
0012:  BCF    03.7
0013:  SWAPF  24,F
0014:  MOVF   04,W
0015:  MOVWF  26
0016:  MOVF   20,W
0017:  MOVWF  27
0018:  MOVF   21,W
0019:  MOVWF  28
001A:  MOVF   22,W
001B:  MOVWF  29
001C:  MOVF   23,W
001D:  MOVWF  2A
001E:  BCF    03.5
001F:  BTFSS  0B.5
0020:  GOTO   023
0021:  BTFSC  0B.2
0022:  GOTO   13C
0023:  BTFSS  0B.4
0024:  GOTO   027
0025:  BTFSC  0B.1
0026:  GOTO   040
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.0
002A:  GOTO   02D
002B:  BTFSC  0C.0
002C:  GOTO   074
002D:  MOVF   26,W
002E:  MOVWF  04
002F:  MOVF   27,W
0030:  MOVWF  20
0031:  MOVF   28,W
0032:  MOVWF  21
0033:  MOVF   29,W
0034:  MOVWF  22
0035:  MOVF   2A,W
0036:  MOVWF  23
0037:  MOVF   2B,W
0038:  MOVWF  0A
0039:  SWAPF  25,W
003A:  MOVWF  03
003B:  BCF    03.5
003C:  SWAPF  24,W
003D:  BTFSC  25.1
003E:  BSF    03.5
003F:  RETFIE
....................  
.................... 								// MOSFET DIMMABLE DRIVER VERSION 1 BETA v1.00 // 
.................... /*  
.................... 	   Details :  
....................  
.................... 	-> Faderate concept removed to execute over current shutdown 
.................... 	-> PWM auto shutdown enabled 
.................... 	-> PWM auto restart disabled 
.................... 	-> PWM restart delay increments sequentially 
.................... 	-> Hardware relay connected to PIN_C2 
.................... 	-> Comparator 2 with inverted output is used 
.................... 	-> CCP1 module is used in PWM mode 
.................... 	-> Device type ID : 7 
.................... 	-> DALI Tx pin : PIN_A0 
.................... 	-> DALI Rx pin : PIN_A2 
.................... 	-> Version : BETA 
.................... 	-> Last modified date : 30/04/2022     
.................... 	-> Github repo URL :   
....................  
.................... */ 
....................   
....................  
.................... #include <slave.h> 
.................... #include <16F684.h> 
.................... //////////// Standard Header file for the PIC16F684 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F684 
*
0260:  MOVLW  20
0261:  MOVWF  70
0262:  CLRF   6C
0263:  CLRF   6D
0264:  CLRF   6E
0265:  CLRF   6F
0266:  MOVF   67,W
0267:  MOVWF  23
0268:  MOVF   66,W
0269:  MOVWF  22
026A:  MOVF   65,W
026B:  MOVWF  21
026C:  MOVF   64,W
026D:  MOVWF  20
026E:  BCF    03.0
026F:  BTFSS  20.0
0270:  GOTO   27F
0271:  MOVF   68,W
0272:  ADDWF  6C,F
0273:  MOVF   69,W
0274:  BTFSC  03.0
0275:  INCFSZ 69,W
0276:  ADDWF  6D,F
0277:  MOVF   6A,W
0278:  BTFSC  03.0
0279:  INCFSZ 6A,W
027A:  ADDWF  6E,F
027B:  MOVF   6B,W
027C:  BTFSC  03.0
027D:  INCFSZ 6B,W
027E:  ADDWF  6F,F
027F:  RRF    6F,F
0280:  RRF    6E,F
0281:  RRF    6D,F
0282:  RRF    6C,F
0283:  RRF    23,F
0284:  RRF    22,F
0285:  RRF    21,F
0286:  RRF    20,F
0287:  DECFSZ 70,F
0288:  GOTO   26E
0289:  GOTO   6CC (RETURN)
....................  
.................... #list 
....................  
....................  
.................... #device adc=8 
....................  
.................... #FUSES WDT                 		// Watch Dog Timer 
.................... #FUSES INTRC_IO                 //Crystal osc <= 4mhz for PCM/PCH , 3mhz to 10 mhz for PCD 
.................... //#FUSES XT 
.................... #FUSES NOPROTECT             	// Code not protected from reading 
.................... #FUSES BROWNOUT              	// Reset when brownout detected 
.................... #FUSES MCLR                  	// Master Clear pin enabled 
.................... #FUSES NOCPD                 	// No EE protection 
.................... #FUSES PUT                 		// Power Up Timer 
.................... #FUSES NOIESO                	// Internal External Switch Over mode disabled 
.................... #FUSES NOFCMEN               	// Fail-safe clock monitor disabled 
....................  
.................... #use delay(clock=4000000) 
....................  
.................... #include<math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2011 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does   //// 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////  * 6/19/2010 :  Divisions by constants converted to multiplication //// 
.................... ////                 by its inverse to improve computation speed        //// 
.................... ////  * 1/21/2011 :  Constants used for double precision math updated   //// 
.................... ////                 Updated routines include 64 bit versions of cos,   //// 
.................... ////                 asin,atan,exp,log and dependant functions          //// 
.................... ////  * 1/31/2011 :  Optimized current 32-bit float routines for cos    //// 
.................... ////                 and log function                                   //// 
.................... ////  * 6/13/2011 :  Fixed PCD overload CEIL_FLOOR functions for values //// 
.................... ////                 greater then 10000000 and less then -10000000      //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    {  
....................       l = (unsigned int16)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float32)l); 
....................       res = 32768.0*(float32)l; 
....................       res += (float32)(unsigned int16)y; 
....................    } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int32 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float48)(unsigned int16)y; 
....................  
....................    else if (y < 549755813888.0) 
....................    { 
....................       l = (unsigned int32)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float48)l); 
....................       res = 32768.0*(float48)l; 
....................       res += (float48)(unsigned int16)y; 
....................    } 
....................    else 
....................    {   
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float48)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    int64 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................       res = (float64)(unsigned int16)y; 
....................    else if (y < 4503599627370496.0) 
....................    { 
....................       l = (int64)(y*0.000030517578125); 
....................       y = 32768.0*(y*0.000030517578125 - (float64)l); 
....................       res = 32768.0*(float64)l; 
....................       res += (float64)(unsigned int16)y; 
....................    } 
....................    else 
....................    { 
....................       res = y; 
....................       y = 0.0; 
....................    } 
....................     
....................    if(y != 0) 
....................       y = y - (float64)(unsigned int16)y; 
....................  
....................    if (s) 
....................       res = -res; 
....................  
....................    if (y != 0) 
....................    { 
....................       if (s == 1 && n == 0) 
....................          res -= 1.0; 
....................  
....................       if (s == 0 && n == 1) 
....................          res += 1.0; 
....................    } 
....................     
....................    if (x == 0) 
....................       res = 0; 
....................  
....................    return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x,0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
.................... #define LN2_INV 1.4426950408889634073 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y*LN2_INV - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x*LN2_INV); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y*LN2_INV - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 const pe_64[12] ={9.30741400474913e-011,-4.28655416283316e-011, 
....................                           8.71486547014137e-009,9.84458531538385e-008, 
....................                           1.32588296983536e-006,1.52489283823016e-005, 
....................                           0.000154037598423921,0.00133335487036216, 
....................                           0.00961812936407326,0.0555041086222122, 
....................                           0.240226506962827,0.693147180559823}; 
....................  
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x*LN2_INV; 
....................    n = (signed int16)y; 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y*LN2_INV - (float64)n; 
....................  
....................    r = pe_64[0]*y + pe_64[1]; 
....................    r = r*y + pe_64[2]; 
....................    r = r*y + pe_64[3]; 
....................    r = r*y + pe_64[4]; 
....................    r = r*y + pe_64[5]; 
....................    r = r*y + pe_64[6]; 
....................    r = r*y + pe_64[7]; 
....................    r = r*y + pe_64[8]; 
....................    r = r*y + pe_64[9]; 
....................    r = r*y + pe_64[10]; 
....................    r = r*y + pe_64[11]; 
....................     
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {-1.080310025160955, 1.999999947089217}; 
.................... float32 const ql[4] = {0.091284365719509, -0.873491916557671}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................      bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... // Overloaded function log() for data type - float64 
.................... float64 const pl_64[4] = {-0.145694052150681, 1.365485300000370, 
....................                           -3.120535668274329, 2.000000000000000}; 
....................  
.................... float64 const ql_64[4] = {0.006047500465908, -0.208298281937234, 
....................                           1.113943039156721, -1.893601167470470}; 
....................  
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
.................... #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
.................... #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................  
.................... #if !defined(__PCD__) 
....................       *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................  
....................       if(bit_test(data2,7)) 
....................       bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0;  
....................       res = y*res/r; 
....................  
....................       data1 = *(((unsigned int8 *)(&x)+5)); 
....................       rotate_left(&data1,1); 
....................       data2 = *(((unsigned int8 *)(&x)+4)); 
....................       if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................        
....................       n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................       r = -(float48)-n; 
....................       else 
....................       r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................    res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................          bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................       r = r*y2 + 1.0; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
.................... #define LN10_INV 0.4342944819032518276 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r*LN10_INV; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    unsigned int8 *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(unsigned int8)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................        bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................        bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................       bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................         bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO_INV 
.................... #undef PI_DIV_BY_TWO_INV 
.................... #endif 
.................... #define PI_DIV_BY_TWO_INV 0.63661977236758134 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #endif 
.................... #define TWOBYPI          0.6366197723675813 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[5] = {                    //by the series definition for cosine 
....................       -0.49999999456337096,            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166663896921267, 
....................       -0.00138883894522527, 
....................        0.00002476138231734, 
....................       -0.00000026070414770 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 4; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float64 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p_64[9] = {               //by the series definition for cosine 
....................      -0.49999999999998740,           // sum ( ( (-1)^n * x^2n )/(2n)! )              
....................       0.04166666666656518, 
....................      -0.00138888888851691, 
....................       0.00002480158658490, 
....................      -0.00000027557239796, 
....................       0.00000000208715031, 
....................      -0.00000000001126577, 
....................       0.00000000000000427, 
....................       0.00000000000000372}; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x * PI_DIV_BY_TWO_INV);    // quadrant 
....................    frac = (x * PI_DIV_BY_TWO_INV) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 8; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p_64[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... double pas_64[5]={1.000000000000000,-2.069938587724477,1.421444580548907, 
....................                  -0.360690137621842,0.024929451660228}; 
....................  
.................... double qas_64[5]={-2.236605254391134,1.719212122946451,-0.524122954476133, 
....................                    0.052808872045749,-0.000662536036570}; 
....................                     
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)*0.5); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas_64[4]*y2 + pas_64[3]; 
....................    res = res*y2 + pas_64[2]; 
....................    res = res*y2 + pas_64[1]; 
....................    res = res*y2 + pas_64[0]; 
....................  
....................    r = qas_64[4]*y2 + qas_64[3]; 
....................    r = r*y2 + qas_64[2]; 
....................    r = r*y2 + qas_64[1]; 
....................    r = r*y2 + qas_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... float64 pat_64[6]={0.999999999999999,2.249923645595566,1.771541617806449, 
....................                    0.579678874003185,0.072162702162882,0.002281100141660}; 
....................  
.................... float64 qat_64[6]={2.583256978928510,2.432627277466967,1.016760379885393, 
....................                    0.182482977188688,0.011155377971690,0.000100013019160}; 
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y,y2, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................    y2 = y*y; 
....................    res = pat_64[5]*y2 + pat_64[4]; 
....................    res = res*y2 + pat_64[3]; 
....................    res = res*y2 + pat_64[2]; 
....................    res = res*y2 + pat_64[1]; 
....................    res = res*y2 + pat_64[0]; 
....................  
....................    r = qat_64[5]*y2 + qat_64[4]; 
....................    r = r*y2 + qat_64[3]; 
....................    r = r*y2 + qat_64[2]; 
....................    r = r*y2 + qat_64[1]; 
....................    r = r*y2 + qat_64[0]; 
....................    r = r*y2 + 1.0; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))*0.5); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... #define LOG2_INV 3.32192809488736234787 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)*LOG2_INV)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <STDLIB.H> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDLIB 
.................... #define _STDLIB 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Definitions and types 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #ifndef RAND_MAX 
.................... #define RAND_MAX  32767    // The value of which is the maximum value 
....................                            // ... returned by the rand function 
.................... #endif 
....................  
....................  
.................... #IF (sizeof(int16*)>1) 
.................... #DEFINE LONG_POINTERS 1 
.................... #ELSE  
.................... #DEFINE LONG_POINTERS 0 
.................... #ENDIF 
....................  
.................... typedef struct { 
....................    signed int quot; 
....................    signed int rem; 
.................... } div_t; 
....................  
.................... typedef struct { 
....................    signed long quot; 
....................    signed long rem; 
.................... } ldiv_t; 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // String conversion functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Standard template: signed int  atoi(char * s) 
....................  * converts the initial portion of the string s to a signed int 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed int atoi(char *s); 
....................  
.................... /* Syntax: signed int32  atoi32(char * s) 
....................    converts the initial portion of the string s to a signed int32 
....................    returns the converted value if any, 0 otherwise*/ 
.................... #if (sizeof(long)==4) 
....................  #define atoi32(s) atol(s) 
.................... #else  
....................  signed int32 atoi32(char *s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
.................... /* Syntax: signed int48  atoi48(char * s) 
....................    converts the initial portion of the string s to a signed int48 
....................    returns the converted value if any, 0 otherwise*/ 
....................     
.................... signed int48 atoi48(char *s); 
....................  
.................... /* Syntax: signed int64  atoi64(char * s) 
....................    converts the initial portion of the string s to a signed int64 
....................    returns the converted value if any, 0 otherwise*/ 
.................... signed int64 atoi64(char *s); 
.................... #endif 
....................  
.................... /* Syntax: char *  itoa(signed int32 num, int8 base, char * s) 
....................    converts the signed int32 to a string and 
....................    returns the converted value if any, 0 otherwise*/ 
.................... char * itoa(signed int32 num, unsigned int base, char * s); 
....................  
.................... /* Standard template: signed int16  atol(char * s) 
....................  * converts the initial portion of the string s to a signed int16 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... signed long atol(char *s); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base  to a signed long. 
....................  * Returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... signed long strtol(char *s,char *endptr, signed int base); 
....................  
.................... /* Standard template: int16 strtoul(char * s,char *endptr,signed int base) 
....................  * converts the initial portion of the string s, represented as an 
....................  * integral value of radix base to a unsigned long. 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null 
....................  */ 
.................... unsigned long strtoul(char *s,char *endptr, signed int base); 
....................  
.................... /* Standart template: float strtof(char * s,char *endptr) 
....................                       float48 strtof48(char *s,char *endptr); 
....................                       float64 strtod(char *s,char *endptr); 
....................  * converts the initial portion of the string s to a float32, float48 or float64, 
....................  * returns the converted value if any, 0 otherwise 
....................  * the final string is returned in the endptr, if endptr is not null                    
.................... */ 
.................... float strtof(char *s,char *endptr); 
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s,char *endptr); 
.................... float64 strtod(char *s,char *endptr); 
.................... #else 
.................... //provided for compatibility 
.................... #define strtof48(s, e) strtof(s, e) 
.................... #define strtod(s, e) strtof(s, e) 
.................... #endif 
....................  
.................... /* Standard template: float32 atof(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof(s)   strtof(s, 0) 
....................  
.................... #if defined(__PCD__) 
.................... // The following functions only work on the 24 bit compiler 
.................... // for the 30F, 33F, 24F and 24H parts 
....................  
.................... /* Standard template: float48 atof48(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof48(s) strtof48(s, 0) 
....................  
.................... /* Standard template: float64 atof64(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  */ 
.................... #define atof64(s) strtod(s, 0) 
.................... #endif 
....................  
.................... /* Standard template: float32 atoe(char * s) 
....................  * converts the initial portion of the string s to a float. 
....................  * returns the converted value if any, 0 otherwise 
....................  * also handles E format numbers 
....................  */ 
.................... #if !defined(__PCD__) 
.................... float atoe(char * s); 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s); 
.................... #endif 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Pseudo-random sequence generation functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The rand function computes a sequence of pseudo-random integers in 
....................  * the range 0 to RAND_MAX 
....................  * 
....................  * Parameters: 
....................  *       (none) 
....................  * 
....................  * Returns: 
....................  *       The pseudo-random integer 
....................  */ 
.................... unsigned int16 rand(void); 
....................  
.................... /* The srand function uses the argument as a seed for a new sequence of 
....................  * pseudo-random numbers to be returned by subsequent calls to rand. 
....................  * 
....................  * Parameters: 
....................  *       [in] seed: The seed value to start from. You might need to pass 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  * 
....................  * Remarks 
....................  *          The srand function sets the starting point for generating 
....................  *       a series of pseudorandom integers. To reinitialize the 
....................  *       generator, use 1 as the seed argument. Any other value for 
....................  *       seed sets the generator to a random starting point. rand 
....................  *       retrieves the pseudorandom numbers that are generated. 
....................  *       Calling rand before any call to srand generates the same 
....................  *       sequence as calling srand with seed passed as 1. 
....................  *          Usually, you need to pass a time here from outer source 
....................  *       so that the numbers will be different every time you run. 
....................  */ 
.................... void srand(unsigned int32 seed); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Memory management functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Comming soon 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Communication with the environment 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* The function returns 0 always 
....................  */ 
.................... signed int8 system(char *string); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities 
.................... //--------------------------------------------------------------------------- 
....................  
.................... /* Performs a binary search of a sorted array.. 
....................  * 
....................  * Parameters: 
....................  *       [in] key: Object to search for 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       bsearch returns a pointer to an occurrence of key in the array pointed 
....................  *       to by base. If key is not found, the function returns NULL. If the 
....................  *       array is not in order or contains duplicate records with identical keys, 
....................  *       the result is unpredictable. 
....................  */ 
.................... //void *bsearch(const void *key, const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... /* Performs the shell-metzner sort (not the quick sort algorithm). The contents 
....................  * of the array are sorted into ascending order according to a comparison 
....................  * function pointed to by compar. 
....................  * 
....................  * Parameters: 
....................  *       [in] base: Pointer to base of search data 
....................  *       [in] num: Number of elements 
....................  *       [in] width: Width of elements 
....................  *       [in] compare: Function that compares two elements 
....................  * 
....................  * Returns: 
....................  *       (none) 
....................  */ 
.................... //void *qsort(const void *base, size_t num, size_t width, 
.................... //              int (*compare)(const void *, const void *)); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Integer arithmetic functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #define labs abs 
....................  
.................... div_t div(signed int numer, signed int denom); 
.................... ldiv_t ldiv(signed long numer, signed long denom); 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte character functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Multibyte string functions 
.................... //--------------------------------------------------------------------------- 
....................  
.................... // Not supported 
....................  
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Internal implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <string.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STRING 
.................... #define _STRING 
.................... #include <stddef.h> 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _STDDEF 
....................  
.................... #define _STDDEF 
....................  
.................... #if sizeof(unsigned int8 *)==1 
.................... #define ptrdiff_t unsigned int8 
.................... #else 
.................... #define ptrdiff_t unsigned int16 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
.................... #define size_t unsigned int8 
.................... #else 
.................... #define size_t unsigned int16 
.................... #endif 
.................... #define wchar_t char 
.................... #define NULL 0 
....................  
.................... #define offsetof(s,f) (offsetofbit(s,f)/8) 
....................  
.................... #endif 
....................  
.................... #include <ctype.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef _CTYPE 
.................... #define _CTYPE 
....................  
.................... #define islower(x)  isamong(x,"abcdefghijklmnopqrstuvwxyz") 
.................... #define isupper(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZ") 
.................... #define isalnum(x)  isamong(x,"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isalpha(x)  isamong(x,"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz") 
.................... #define isdigit(x)  isamong(x,"0123456789") 
.................... #define isspace(x)  ((x)==' ') 
.................... #define isxdigit(x) isamong(x,"0123456789ABCDEFabcdef") 
.................... #define iscntrl(x)  ((x)<' ') 
.................... #define isprint(x)  ((x)>=' ') 
.................... #define isgraph(x)  ((x)>' ') 
.................... #define ispunct(x)  (((x)>' ')&&!isalnum(x)) 
....................  
.................... #endif 
....................  
....................  
....................  
....................  
....................  
.................... ////////////////////////////////////////////// 
.................... //// Uncomment the following define to    //// 
.................... //// allow some functions to use a        //// 
.................... //// quicker algorithm, but use more ROM  //// 
.................... ////                                      //// 
.................... //// #define FASTER_BUT_MORE_ROM          //// 
.................... ////////////////////////////////////////////// 
....................  
....................  
....................  
.................... /*Copying functions*/ 
.................... /* standard template: 
....................    void *memmove(void *s1, void *s2, size_t n). 
....................    Copies max of n characters safely (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *memmove(void *s1,char *s2,size_t n) 
.................... { 
....................    char *sc1; 
....................    char *sc2; 
....................    sc1=s1; 
....................    sc2=s2; 
....................    if(sc2<sc1 && sc1 <sc2 +n) 
....................       for(sc1+=n,sc2+=n;0<n;--n) 
....................          *--sc1=*--sc2; 
....................    else 
....................       for(;0<n;--n) 
....................          *sc1++=*sc2++; 
....................   return s1; 
....................   } 
....................  
.................... /* Standard template: char *strcpy(char *s1, const char *s2) 
....................    copies the string s2 including the null character to s1. 
....................    This is a compiler built in to handle the different address 
....................    spaces */ 
....................  
.................... #define strcopy strcpy 
....................  
.................... /* standard template: 
....................    char *strncpy(char *s1, const char *s2, size_t n). 
....................    Copies max of n characters (not following ending '\0') 
....................    from s2 in s1; if s2 has less than n characters, appends 0 */ 
....................  
.................... char *strncpy(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................  
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(s1); 
.................... } 
.................... /***********************************************************/ 
....................  
.................... /*concatenation functions*/ 
.................... /* standard template: char *strcat(char *s1, const char *s2) 
.................... appends s2 to s1*/ 
....................  
.................... char *strcat(char *s1, char *s2) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0') 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
.................... /* standard template: char *strncat(char *s1, char *s2,size_t n) 
.................... appends not more than n characters from s2 to s1*/ 
....................  
.................... char *strncat(char *s1, char *s2, size_t n) 
.................... { 
....................    char *s; 
....................  
....................    for (s = s1; *s != '\0'; ++s); 
....................    while(*s2 != '\0' && 0<n) 
....................    { 
....................       *s = *s2; 
....................       ++s; 
....................       ++s2; 
....................       --n; 
....................    } 
....................  
....................    *s = '\0'; 
....................    return(s1); 
.................... } 
....................  
.................... /***********************************************************/ 
....................  
....................  
.................... /*comparison functions*/ 
.................... /* standard template: signed int memcmp(void *s1, void *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 memcmp(void * s1,char *s2,size_t n) 
.................... { 
.................... char *su1, *su2; 
.................... for(su1=s1, su2=s2; 0<n; ++su1, ++su2, --n) 
.................... { 
....................    if(*su1!=*su2) 
....................       return ((*su1<*su2)?-1:+1); 
.................... } 
.................... return 0; 
.................... } 
....................  
.................... /* standard template: int strcmp(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcmp(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
.................... /* standard template: int strcoll(const char *s1, const char *s2). 
....................    Compares s1 & s2; returns -1 if s1<s2, 0 if s1=s2, 1 if s1>s2 */ 
....................  
.................... signed int8 strcoll(char *s1, char *s2) 
.................... { 
....................    for (; *s1 == *s2; s1++, s2++) 
....................       if (*s1 == '\0') 
....................          return(0); 
....................    return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
.................... /* standard template: 
....................    int strncmp(const char *s1, const char *s2, size_t n). 
....................    Compares max of n characters (not following 0) from s1 to s2; 
....................    returns same as strcmp */ 
....................  
.................... signed int8 strncmp(char *s1, char *s2, size_t n) 
.................... { 
....................    for (; n > 0; s1++, s2++, n--) 
....................       if (*s1 != *s2) 
....................          return((*s1 <*s2) ? -1: 1); 
....................       else if (*s1 == '\0') 
....................          return(0); 
....................    return(0); 
.................... } 
.................... /* standard template: 
....................    int strxfrm(const char *s1, const char *s2, size_t n). 
....................    transforms maximum of n characters from s2 and places them into s1*/ 
.................... size_t strxfrm(char *s1, char *s2, size_t n) 
.................... { 
....................   char *s; 
....................   unsigned int8 n1; 
....................   n1=n; 
....................   for (s = s1; n > 0 && *s2 != '\0'; n--) 
....................      *s++ = *s2++; 
....................   for (; n > 0; n--) 
....................      *s++ = '\0'; 
....................  
....................   return(n1); 
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... /***********************************************************/ 
.................... /*Search functions*/ 
.................... /* standard template: void *memchr(const char *s, int c). 
....................    Finds first occurrence of c in n characters of s */ 
....................  
.................... char *memchr(void *s,unsigned int8 c,size_t n) 
.................... { 
....................    char uc; 
....................    char *su; 
....................    uc=c; 
....................    for(su=s;0<n;++su,--n) 
....................       if(*su==uc) 
....................       return su; 
....................    return NULL; 
.................... } 
....................  
.................... /* standard template: char *strchr(const char *s, int c). 
....................    Finds first occurrence of c in s */ 
....................  
.................... char *strchr(char *s, unsigned int8 c) 
.................... { 
....................    for (; *s != c; s++) 
....................       if (*s == '\0') 
....................          return(0); 
....................    return(s); 
.................... } 
.................... /* standard template: 
....................    size_t strcspn(const char *s1, const char *s2). 
....................    Computes length of max initial segment of s1 that 
....................    consists entirely of characters NOT from s2*/ 
....................  
.................... unsigned int8  strcspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1 - s1); 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strpbrk(const char *s1, const char *s2). 
....................    Locates first occurence of any character from s2 in s1; 
....................    returns s1 if s2 is empty string */ 
....................  
.................... char *strpbrk(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; *sc2 != 0; sc2++) 
....................          if (*sc1 == *sc2) 
....................             return(sc1); 
....................    return(0); 
.................... } 
....................  
....................  
.................... /* standard template: char *strrchr(const char *s, int c). 
....................    Finds last occurrence of c in s */ 
....................  
.................... char *strrchr(char *s, unsigned int8 c) 
.................... { 
....................    char *p; 
....................  
....................    for (p = 0; ; s++) 
....................    { 
....................       if (*s == c) 
....................          p = s; 
....................       if (*s == '\0') 
....................          return(p); 
....................    } 
.................... } 
.................... /* computes length of max initial segment of s1 consisting 
....................    entirely of characters from s2 */ 
....................  
.................... unsigned int8  strspn(char *s1, char *s2) 
.................... { 
....................    char *sc1, *sc2; 
....................  
....................    for (sc1 = s1; *sc1 != 0; sc1++) 
....................       for (sc2 = s2; ; sc2++) 
....................     if (*sc2 == '\0') 
....................        return(sc1 - s1); 
....................          else if (*sc1 == *sc2) 
....................             break; 
....................    return(sc1 - s1); 
.................... } 
.................... /* standard template: 
....................    char *strstr(const char *s1, const char *s2); 
....................    Locates first occurence of character sequence s2 in s1; 
....................    returns 0 if s2 is empty string 
....................  
....................    Uncomment #define FASTER_BUT_MORE_ROM at the top of the 
....................    file to use the faster algorithm */ 
.................... char *strstr(char *s1, char *s2) 
.................... { 
....................    char *s, *t; 
....................  
....................    #ifdef FASTER_BUT_MORE_ROM 
....................    if (*s2 == '\0') 
....................          return(s1); 
....................    #endif 
....................  
....................    while (*s1) 
....................    { 
....................       for(s = s1, t = s2; *t && (*s == *t); ++s, ++t); 
....................  
....................       if (*t == '\0') 
....................          return s1; 
....................       ++s1; 
....................       #ifdef FASTER_BUT_MORE_ROM 
....................          while(*s1 != '\0' && *s1 != *s2) 
....................             ++s1; 
....................       #endif 
....................    } 
....................    return 0; 
.................... } 
....................  
.................... /* standard template: char *strtok(char *s1, const char *s2). 
....................  
....................    Finds next token in s1 delimited by a character from separator 
....................    string s2 (which can be different from call to call).  First call 
....................    starts at beginning of s1 searching for first character NOT 
....................    contained in s2; returns 0 if none is found. 
....................    If one is found, it is the start of first token (return value). 
....................    Function then searches from there for a character contained in s2. 
....................    If none is found, current token extends to end of s1, and subsequent 
....................    searches for a token will return 0.  If one is found, it is 
....................    overwritten by '\0', which terminates current token.  Function saves 
....................    pointer to following character from which next search will start. 
....................    Each subsequent call, with 0 as first argument, starts searching 
....................    from saved pointer */ 
....................  
.................... char *strtok(char *s1, char *s2) 
.................... { 
....................    char *beg, *end; 
....................    static char *save; 
*
0654:  CLRF   2C
....................  
....................    beg = (s1)? s1: save; 
....................    beg += strspn(beg, s2); 
....................    if (*beg == '\0') 
....................    { 
....................       *save = ' '; 
....................       return(0); 
....................    } 
....................    end = strpbrk(beg, s2); 
....................    if (*end != '\0') 
....................    { 
....................       *end = '\0'; 
....................       end++; 
....................    } 
....................    save = end; 
....................    return(beg); 
.................... } 
....................  
.................... /*****************************************************************/ 
.................... /*Miscellaneous functions*/ 
.................... /* standard template 
.................... maps error number in errnum to an error message string 
.................... Returns: Pointer to string 
.................... */ 
.................... #ifdef _ERRNO 
.................... char * strerror(unsigned int8 errnum) 
.................... { 
.................... static char s[13]; 
.................... switch( errnum) 
.................... { 
.................... case 0: 
....................    strcpy(s,"no errors"); 
....................    return s; 
.................... case EDOM : 
....................    strcpy(s,"domain error"); 
....................    return s; 
.................... case ERANGE: 
....................    strcpy(s,"range error"); 
....................    return s; 
.................... } 
.................... } 
.................... #ENDIF 
.................... /* standard template: size_t strlen(const char *s). 
....................    Computes length of s1 (preceding terminating 0) */ 
....................  
.................... unsigned int8 strlen(char *s) 
.................... { 
....................    char *sc; 
....................  
....................    for (sc = s; *sc != 0; sc++); 
....................    return(sc - s); 
.................... } 
....................  
.................... /* standard template: size_t stricmp(const char *s1, const char *s2). 
....................    Compares s1 to s2 ignoring case (upper vs. lower) */ 
....................  
.................... signed int8 stricmp(char *s1, char *s2) 
.................... { 
....................  for(; *s1==*s2||(isalpha(*s1)&&isalpha(*s2)&&(*s1==*s2+32||*s2==*s1+32)); 
....................     s1++, s2++) 
....................     if (*s1 == '\0') 
....................        return(0); 
....................  return((*s1 < *s2) ? -1: 1); 
.................... } 
....................  
....................  
.................... /* standard template: char *strlwr(char *s). 
....................    Replaces uppercase letters by lowercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strlwr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'A' && *p <='Z') 
....................          *p += 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
.................... /* standard template: char *strupr(char *s). 
....................    Replaces lowercase letters by upercase; 
....................    returns pointer to new string s */ 
....................  
.................... char *strupr(char *s) 
.................... { 
....................    char *p; 
....................  
....................    for (p = s; *p != '\0'; p++) 
....................       if (*p >= 'a' && *p <='z') 
....................          *p -= 'a' - 'A'; 
....................    return(s); 
.................... } 
....................  
....................  
.................... /************************************************************/ 
....................  
....................  
.................... #endif 
....................  
....................  
.................... div_t div(signed int numer, signed int denom) 
.................... { 
....................    div_t val; 
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... ldiv_t ldiv(signed long numer, signed long denom) 
.................... { 
....................    ldiv_t val; 
....................  
....................    val.quot = numer / denom; 
....................    val.rem = numer - (denom * val.quot); 
....................    return (val); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float32 atoe(char * s) 
.................... { 
....................    float32 pow10 = 1.0; 
....................    float32 result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float32 exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if !defined(__PCD__) 
.................... float atoe(char * s) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    unsigned int8 sign = 0; 
....................    unsigned int8 expsign = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................    unsigned int8 i; 
....................    float exp = 1.0; 
....................    unsigned int8 expcnt = 0; 
....................  
....................    c = s[ptr++]; 
....................  
....................    if ((c>='0' && c<='9') || c=='+' || c=='-' || c=='.' || c=='E' || c=='e') { 
....................       if(c == '-') { 
....................          sign = 1; 
....................          c = s[ptr++]; 
....................       } 
....................       if(c == '+') 
....................          c = s[ptr++]; 
....................  
....................       while((c >= '0' && c <= '9')) { 
....................          result = 10*result + c - '0'; 
....................          c = s[ptr++]; 
....................       } 
....................  
....................       if (c == '.') { 
....................          c = s[ptr++]; 
....................          while((c >= '0' && c <= '9')) { 
....................              pow10 = pow10*10; 
....................              result += (c - '0')/pow10; 
....................              c = s[ptr++]; 
....................          } 
....................       } 
....................  
....................       // Handling the exponent 
....................       if (c=='e' || c=='E') { 
....................          c = s[ptr++]; 
....................  
....................          if(c == '-') { 
....................             expsign = 1; 
....................             c = s[ptr++]; 
....................          } 
....................          if(c == '+') 
....................             c = s[ptr++]; 
....................  
....................          while((c >= '0' && c <= '9')) { 
....................             expcnt = 10*expcnt + c - '0'; 
....................             c = s[ptr++]; 
....................          } 
....................  
....................          for(i=0;i<expcnt;i++) 
....................             exp*=10; 
....................  
....................          if(expsign==1) 
....................             result/=exp; 
....................          else 
....................             result*=exp; 
....................       } 
....................    } 
....................  
....................    if (sign == 1) 
....................       result = -1*result; 
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... signed int atoi(char *s) 
.................... { 
....................    signed int result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    // Omit all preceeding alpha characters 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................  
....................       // Check for hexa number 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c<='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++]; 
....................             c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (sign == 1 && base == 10) 
....................        result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed long atol(char *s) 
.................... { 
....................    signed long result; 
....................    unsigned int sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') 
....................          { 
....................             result = 10*result + (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ( (c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... /* A fast routine to multiply by 10 
....................  */ 
.................... signed int32 mult_with10(int32 num) 
.................... { 
....................    return ( (num << 1) + (num << 3) ); 
.................... } 
....................  
.................... #if sizeof(long)==2 
.................... signed int32 atoi32(char *s) 
.................... { 
....................    signed int32 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... #if defined(__PCD__) 
....................  
.................... signed int48 atoi48(char *s) 
.................... { 
....................    signed int48 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
....................  
.................... signed int64 atoi64(char *s) 
.................... { 
....................    signed int64 result; 
....................    int8 sign, base, index; 
....................    char c; 
....................  
....................    index = 0; 
....................    sign = 0; 
....................    base = 10; 
....................    result = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................    c = s[index++]; 
....................  
....................    // increase index if either positive or negative sign is detected 
....................    if (c == '-') 
....................    { 
....................       sign = 1;         // Set the sign to negative 
....................       c = s[index++]; 
....................    } 
....................    else if (c == '+') 
....................    { 
....................       c = s[index++]; 
....................    } 
....................  
....................    if (c >= '0' && c <= '9') 
....................    { 
....................       if (c == '0' && (s[index] == 'x' || s[index] == 'X')) 
....................       { 
....................          base = 16; 
....................          index++; 
....................          c = s[index++]; 
....................       } 
....................  
....................       // The number is a decimal number 
....................       if (base == 10) 
....................       { 
....................          while (c >= '0' && c <= '9') { 
....................             result = (result << 1) + (result << 3);  // result *= 10; 
....................             result += (c - '0'); 
....................             c = s[index++]; 
....................          } 
....................       } 
....................       else if (base == 16)    // The number is a hexa number 
....................       { 
....................          c = toupper(c); 
....................          while ((c >= '0' && c <= '9') || (c >= 'A' && c <='F')) 
....................          { 
....................             if (c >= '0' && c <= '9') 
....................                result = (result << 4) + (c - '0'); 
....................             else 
....................                result = (result << 4) + (c - 'A' + 10); 
....................  
....................             c = s[index++];c = toupper(c); 
....................          } 
....................       } 
....................    } 
....................  
....................    if (base == 10 && sign == 1) 
....................       result = -result; 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... char * itoa(signed int32 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int32 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #if defined(__PCD__) 
....................  
.................... char * itoa(signed int48 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int48 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................  
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1; 
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................  
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... char * itoa(signed int64 num, unsigned int base, char * s) 
.................... { 
....................      unsigned int64 temp=1; 
....................      unsigned int8 i,sign=0,cnt=0; 
....................      char c; 
....................       
....................      if(num<0) { 
....................          sign=1;        // Check for negative number 
....................          num*=-1;         
....................      } 
....................  
....................      while(temp>0) { 
....................          temp=(num/base); 
....................          s[cnt]=(num%base)+'0';    // Conversion 
....................  
....................          if(s[cnt]>0x39) 
....................             s[cnt]+=0x7; 
....................              
....................          cnt++; 
....................          num=temp; 
....................      } 
....................  
....................      if(sign==1) { 
....................          s[cnt]=0x2D;      // Negative sign 
....................          cnt++; 
....................      } 
....................  
....................      for(i = 0;i<(int8)(cnt/2);i++) { 
....................  
....................          c=s[i]; 
....................          s[i]=s[cnt-i-1];        // Reverse the number 
....................          s[cnt-i-1]=c; 
....................      } 
....................      s[cnt]='\0';     // End the string 
....................      return s; 
.................... } 
....................  
.................... #endif 
....................  
.................... float strtof(char *s, char *endptr) 
.................... { 
....................    float pow10 = 1.0; 
....................    float result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... #if defined(__PCD__) 
.................... float48 strtof48(char *s, char *endptr) 
.................... { 
....................    float48 pow10 = 1.0; 
....................    float48 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float48)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float48)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
....................  
.................... float64 strtod(char *s, char *endptr) 
.................... { 
....................    float64 pow10 = 1.0; 
....................    float64 result = 0.0; 
....................    int1 skip = 1, sign = 0, point = 0; 
....................    char c; 
....................    unsigned int8 ptr = 0; 
....................  
....................    if (!s) 
....................       return 0; 
....................  
....................    for(c=s[ptr++]; c!=0; c=s[ptr++]) 
....................    { 
....................       if (skip && !isspace(c)) 
....................       { 
....................          skip = 0; 
....................          if (c == '+') 
....................          { 
....................             sign = 0; 
....................             continue; 
....................          }             
....................          else if (c == '-') 
....................          { 
....................             sign = 1; 
....................             continue; 
....................          } 
....................       } 
....................       if (!skip && (c == '.') && !point) 
....................          point = 1; 
....................       else if (!skip && isdigit(c)) 
....................       { 
....................          c -= '0'; 
....................          if (point) 
....................          { 
....................             pow10 = pow10 * 10.0; 
....................             result += (float64)c / pow10;    
....................          } 
....................          else 
....................          { 
....................             result = 10.0 * result + (float64)c; 
....................          } 
....................       } 
....................       else if (!skip) 
....................          break; 
....................    } 
....................  
....................    if (sign) 
....................       result = -1*result; 
....................        
....................    if(endptr) 
....................    { 
....................       if (ptr) { 
....................          ptr--; 
....................        #IF LONG_POINTERS  
....................          *((int16 *)endptr)= s+ptr;  
....................        #ELSE 
....................          *((char *)endptr)=s+ptr; 
....................        #ENDIF 
....................       } 
....................       else 
....................       { 
....................       #IF LONG_POINTERS 
....................       *((int16 *)endptr)= s;  
....................       #ELSE 
....................       *((char *)endptr)=s; 
....................       #ENDIF 
....................       } 
....................    } 
....................  
....................    return(result); 
.................... } 
.................... #endif 
....................  
.................... unsigned long strtoul(char *s, char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    unsigned long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if(sign=='-' || base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtoulGO; 
....................  
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(; sd!=0; ) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtoulGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................          } 
....................    return 0; 
....................    } 
....................    if (endptr) 
....................    { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................          #ELSE 
....................          *((char *)endptr)=sc;  
....................          #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
....................  
.................... signed long strtol(char *s,char *endptr, signed int base) 
.................... { 
....................    char *sc,*s1,*sd; 
....................    signed long x=0; 
....................    char sign; 
....................    char digits[]="0123456789abcdefghijklmnopqstuvwxyz"; 
....................    for(sc=s;isspace(*sc);++sc); 
....................    sign=*sc=='-'||*sc=='+'?*sc++:'+'; 
....................    if (base <0 || base ==1|| base >36) // invalid base 
....................    goto StrtolGO; 
....................    else if (base) 
....................    { 
....................       if(base==16 && *sc =='0'&&(sc[1]=='x' || sc[1]=='X')) 
....................          sc+=2; 
....................       if(base==8 && *sc =='0') 
....................          sc+=1; 
....................       if(base==2 && *sc =='0'&&sc[1]=='b') 
....................          sc+=2; 
....................  
....................    } 
....................    else if(*sc!='0') // base is 0, find base 
....................       base=10; 
....................    else if (sc[1]=='x' || sc[1]=='X') 
....................       base =16,sc+=2; 
....................    else if(sc[1]=='b') 
....................       base=2,sc+=2; 
....................    else 
....................       base=8; 
....................    for (s1=sc;*sc=='0';++sc);// skip leading zeroes 
....................  
....................    sd=memchr(digits,tolower(*sc),base); 
....................    for(;sd!=0;) 
....................    { 
....................       x=x*base+(int16)(sd-digits); 
....................       ++sc; 
....................       sd=memchr(digits,tolower(*sc),base); 
....................    } 
....................    if(s1==sc) 
....................    { 
....................    StrtolGO: 
....................       if (endptr) 
....................       { 
....................          #IF LONG_POINTERS 
....................          *((int16 *)endptr)= s;  
....................          #ELSE 
....................          *((char *)endptr)=s; 
....................          #ENDIF 
....................       } 
....................    return 0; 
....................    } 
....................    if(sign=='-') 
....................       x  =-x; 
....................    if (endptr) 
....................    { 
....................         #IF LONG_POINTERS 
....................          *((int16 *)endptr)= sc;  
....................         #ELSE 
....................         *((char *)endptr)=sc; 
....................         #ENDIF 
....................    } 
....................    return x; 
.................... } 
....................  
.................... signed int8 system(char *string) 
.................... { 
....................    return 0; 
.................... } 
....................  
.................... int8 mblen(char *s,size_t n) 
.................... { 
....................    return strlen(s); 
.................... } 
....................  
.................... int8 mbtowc(wchar_t *pwc,char *s,size_t n) 
.................... { 
....................    *pwc=*s; 
....................    return 1; 
.................... } 
....................  
.................... int8 wctomb(char *s,wchar_t wchar) 
.................... { 
....................    *s=wchar; 
....................    return 1; 
.................... } 
....................  
.................... size_t mbstowcs(wchar_t *pwcs,char *s,size_t n) 
.................... { 
....................    strncpy(pwcs,s,n); 
....................    return strlen(pwcs); 
.................... } 
....................  
.................... size_t wcstombs(char *s,wchar_t *pwcs,size_t n) 
.................... { 
....................    strncpy(s,pwcs,n); 
....................    return strlen(s); 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // The random number implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... unsigned int32 _Randseed; 
....................  
.................... unsigned int16 rand(void) 
.................... { 
....................    _Randseed = _Randseed * 1103515245 + 12345; 
....................    return ((unsigned int16)(_Randseed >> 16) % RAND_MAX); 
.................... } 
....................  
.................... void srand(unsigned int32 seed) 
.................... { 
....................    _Randseed = seed; 
.................... } 
....................  
.................... //--------------------------------------------------------------------------- 
.................... // Searching and sorting utilities implementation 
.................... //--------------------------------------------------------------------------- 
....................  
.................... #if !defined(__PCD__) 
.................... typedef signed int8 (*_Cmpfun)(char * p1,char * p2);  
.................... #else  
.................... typedef signed int16 (*_Cmpfun)(char * p1,char * p2);  
.................... #endif 
....................  
....................  
....................  
.................... void qsort(char * qdata, unsigned int qitems, unsigned int qsize, _Cmpfun cmp) { 
....................    unsigned int m,j,i,l; 
....................    int1 done; 
....................    unsigned int8 t[16]; 
....................  
....................    m = qitems/2; 
....................    while( m > 0 ) { 
....................      for(j=0; j<(qitems-m); ++j) { 
....................         i = j; 
....................         do 
....................         { 
....................            done=1; 
....................            l = i+m; 
....................            if( (*cmp)(qdata+i*qsize, qdata+l*qsize) > 0 ) { 
....................               memcpy(t, qdata+i*qsize, qsize); 
....................               memcpy(qdata+i*qsize, qdata+l*qsize, qsize); 
....................               memcpy(qdata+l*qsize, t, qsize); 
....................               if(m <= i) 
....................                 i -= m; 
....................                 done = 0; 
....................            } 
....................         } while(!done); 
....................      } 
....................      m = m/2; 
....................    } 
.................... } 
....................  
....................  
.................... char *bsearch(char *key, char *base, size_t num, size_t width,_Cmpfun cmp) 
.................... { 
....................    char *p, *q; 
....................    size_t n; 
....................    size_t pivot; 
....................    signed int val; 
....................  
....................    p = base; 
....................    n = num; 
....................  
....................    while (n > 0) 
....................    { 
....................       pivot = n >> 1; 
....................       q = p + width * pivot; 
....................  
....................       val = (*cmp)(key, q); 
....................  
....................       if (val < 0) 
....................          n = pivot; 
....................       else if (val == 0) 
....................          return ((char *)q); 
....................       else { 
....................          p = q + width; 
....................          n -= pivot + 1; 
....................       } 
....................    } 
....................  
....................    return NULL;      // There's no match 
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
.................... #use delay(clock=4000000) 
*
02E5:  MOVLW  12
02E6:  SUBWF  67,F
02E7:  BTFSS  03.0
02E8:  GOTO   2F7
02E9:  MOVLW  67
02EA:  MOVWF  04
02EB:  MOVLW  FC
02EC:  ANDWF  00,F
02ED:  BCF    03.0
02EE:  RRF    00,F
02EF:  RRF    00,F
02F0:  MOVF   00,W
02F1:  BTFSC  03.2
02F2:  GOTO   2F7
02F3:  GOTO   2F5
02F4:  NOP
02F5:  DECFSZ 00,F
02F6:  GOTO   2F4
*
0618:  MOVLW  64
0619:  MOVWF  04
061A:  MOVF   00,W
061B:  BTFSC  03.2
061C:  GOTO   62B
061D:  MOVLW  01
061E:  MOVWF  21
061F:  CLRF   20
0620:  DECFSZ 20,F
0621:  GOTO   620
0622:  DECFSZ 21,F
0623:  GOTO   61F
0624:  MOVLW  4A
0625:  MOVWF  20
0626:  DECFSZ 20,F
0627:  GOTO   626
0628:  GOTO   629
0629:  DECFSZ 00,F
062A:  GOTO   61D
....................  
.................... #define device_type 7  				// setting device type 7 - MOSFET dimamble driver 
....................  
.................... #define Fixlampid   10 				// LAMP ADDRESS // 
.................... #define zoneid_init   212 			// zone address //  
.................... #define G1 0b00000001 
.................... #define G2 0b00000000 
.................... #define rx pin_a2 
.................... #define tx pin_a0 
.................... #define self 0x01 
....................  
.................... #define MaxDuty  100  
.................... #define MinDuty  0 
....................  
.................... /////////////////////////////////////////////////////////////// 
....................  
.................... #define PowerOnLevelStore    		0        	// Latest power level    
.................... #define MinimumLevelStore           1			// Minimum allowable power level 
.................... #define MaximumLevelStore  			2 			// Maximum allowable power level 
.................... #define ShortAddressStore  			3  			// Unique device ID 
.................... #define Group_07Store    			4			// First byte of group 
.................... #define Group_815Store  			5			// Second byte of group 
.................... #define SceneStore  				6			// 6-21 Scene level store 
.................... #define ZoneIDStore 				32 
.................... #define SystemFailureRateStore 		25 
....................  
.................... ////////////////// Device types //////////////////////// 
.................... /* 
.................... 	lamp =1 
.................... 	fan=2 
.................... 	curtain=3 
.................... 	strip=4 
.................... 	mosfet dimamble driver = 7 
.................... */ 
.................... //////////////////////////////////////////////////////// 
....................  
.................... #bit PRSEN     = 0x16.7   // PWM autorestart control bit 
.................... #bit CCMCON0 = 0x019.5	  // Comparator output invert bit 
.................... #bit ECCPASE = 0x017.7	  // PWM shutdown event status bit 
....................  
.................... #byte dutyreg = 0x15 
....................   
.................... #bit intf = 0x0b.1 
.................... #bit timerOnOff =0x10.0 
....................  
.................... int1 oddevenbit,a,atmp,b,error_flag,over_flowflag; 
.................... unsigned int8 dataCount; 
.................... char data[3],bitcount,tout; 
.................... unsigned char duty; 
....................  
.................... unsigned int16 power; 
....................  
.................... char settling_time,i,dly=4,j; 
.................... int1 txmit_error=0; 
.................... char tx_buffer[3]; 
.................... char r_a,currentSceen; 
.................... char l_st; 
.................... char command_st,RetryCount; 
....................  
.................... char zoneid=zoneid_init; 
....................  
.................... char stopBitCount,address ,command,databyte; 
.................... int1 dataready,forwrdFrameFlag,backwardFrameFlag ,masterFlag ; 
.................... int16 readDly=300; 
.................... int16 GroupSelectReg; 
.................... char gindex; 
....................  
.................... /////// new  ////// 
.................... int txmit_count=0; 
.................... int error_value=0; 
.................... /////////////////// 
....................  
.................... char MinimumLevel; 
.................... char MaximumLevel; 
.................... char PowerOnLevel; 
.................... char DTR,DwriteLocation,DTR_Ready; 
....................  
.................... char lampid  = Fixlampid; 
....................  
.................... int1 reset_flag=0;			// For WDT reset operation inside RTCC interrupt 
....................  
.................... int32 restart_count=0; 
.................... int32 restart_delay=0; 
.................... char failure_count=0; 
....................  
.................... void readData(void); 
.................... void init(void); 
.................... void handle(void ); 
.................... void copyData(void); 
.................... void commands(void); 
.................... void txmit(char priority,char length); 
.................... void txmit1(void); 
.................... void txmit0(void); 
.................... void stopbit(void); 
.................... void lamp_on(void); 
.................... void lamp_off(void); 
.................... void startBit(void); 
.................... void init_from_eeprom(void); 
.................... void SetDimmLevel(unsigned int dimPesentage); 
....................  
....................  
.................... #rom  0x2100={MaxDuty,MinDuty,MaxDuty,Fixlampid,G1,G2,0,20,30,50,70,90,100,35,40,45,75,25,60,65,95,100} 
....................  
.................... #rom  0x2120={zoneid_init} 
....................  
.................... #int_EXT 
.................... EXT_isr()  
.................... { 
.................... 			clear_interrupt(int_ext); 
*
0040:  BCF    0B.1
....................             disable_interrupts(int_ext); 
0041:  BCF    0B.4
....................             disable_interrupts(INT_RTCC); 
0042:  BCF    0B.5
....................             bitcount=0; 
0043:  CLRF   36
....................             setup_timer_1(T1_internal|T1_div_by_1); 
0044:  MOVLW  05
0045:  MOVWF  10
....................             set_timer1(0xffff-840); //858  880///old value 923 
0046:  CLRF   0E
0047:  MOVLW  FC
0048:  MOVWF  0F
0049:  MOVLW  B7
004A:  MOVWF  0E
....................             enable_interrupts(int_timer1); 
004B:  BSF    03.5
004C:  BSF    0C.0
....................             stopBitCount = 0; 
004D:  BCF    03.5
004E:  CLRF   48
....................             oddevenbit=1; 
004F:  BSF    31.0
....................             data[0]=0; 
0050:  CLRF   33
....................             data[1]=0; 
0051:  CLRF   34
....................             data[2]=0; 
0052:  CLRF   35
....................             tout=0 ; 
0053:  CLRF   37
....................             datacount = 0;    
0054:  CLRF   32
.................... 			settling_time = 0;  
0055:  CLRF   3B
.................... } 
....................  
....................  
0056:  BCF    0B.1
0057:  BCF    0A.3
0058:  GOTO   02D
.................... #int_TIMER1 
.................... TIMER1_isr() 
.................... { 
....................  
.................... readDly=20; 
*
0074:  CLRF   4E
0075:  MOVLW  14
0076:  MOVWF  4D
.................... error_flag=0; 
0077:  BCF    31.4
.................... 	if(oddevenbit==1) 
0078:  BTFSS  31.0
0079:  GOTO   0B5
.................... 	{ 
.................... 		a=input(rx);  
007A:  BSF    03.5
007B:  BSF    05.2
007C:  BCF    03.5
007D:  BCF    31.1
007E:  BTFSC  05.2
007F:  BSF    31.1
.................... 		atmp=a ;           
0080:  BCF    31.2
0081:  BTFSC  31.1
0082:  BSF    31.2
.................... 		oddevenbit=0 ; 
0083:  BCF    31.0
.................... 		 
.................... 				if(atmp) 
0084:  BTFSS  31.2
0085:  GOTO   09C
.................... 				{ 
.................... 					while(atmp) 
0086:  BTFSS  31.2
0087:  GOTO   09B
.................... 						{ 
.................... 							atmp=input(rx); 
0088:  BSF    03.5
0089:  BSF    05.2
008A:  BCF    03.5
008B:  BCF    31.2
008C:  BTFSC  05.2
008D:  BSF    31.2
.................... 							if(readDly>0) 
008E:  MOVF   4D,F
008F:  BTFSS  03.2
0090:  GOTO   094
0091:  MOVF   4E,F
0092:  BTFSC  03.2
0093:  GOTO   099
.................... 								readDly--; 
0094:  MOVF   4D,W
0095:  BTFSC  03.2
0096:  DECF   4E,F
0097:  DECF   4D,F
0098:  GOTO   09A
.................... 							else 
.................... 								atmp=0; 
0099:  BCF    31.2
009A:  GOTO   086
.................... 								 
.................... 						} 
.................... 				}          
009B:  GOTO   0AD
.................... 				else 
.................... 				{ 
.................... 					while(!atmp) 
009C:  BTFSC  31.2
009D:  GOTO   0AD
.................... 						{ 
.................... 							atmp=input(rx); 
009E:  BSF    03.5
009F:  BSF    05.2
00A0:  BCF    03.5
00A1:  BCF    31.2
00A2:  BTFSC  05.2
00A3:  BSF    31.2
.................... 							readDly--; 
00A4:  MOVF   4D,W
00A5:  BTFSC  03.2
00A6:  DECF   4E,F
00A7:  DECFSZ 4D,F
.................... 								if(readdly==0) 
00A8:  GOTO   0AC
00A9:  MOVF   4E,F
00AA:  BTFSC  03.2
.................... 									{ 
.................... 									atmp=1; 
00AB:  BSF    31.2
.................... 									}	 
00AC:  GOTO   09C
.................... 						} 
.................... 				} 
....................  
.................... 			setup_timer_1(T1_internal|T1_div_by_1);//settimer1with1us least count 
00AD:  MOVLW  05
00AE:  MOVWF  10
.................... 			set_timer1(0xffff-150);  //374  //  355             350////old value 150 
00AF:  CLRF   0E
00B0:  MOVLW  FF
00B1:  MOVWF  0F
00B2:  MOVLW  69
00B3:  MOVWF  0E
.................... 	} 
00B4:  GOTO   137
.................... 	else 
.................... 	{  
.................... 		b=input(rx) ; // store data line status in the second half 
00B5:  BSF    03.5
00B6:  BSF    05.2
00B7:  BCF    03.5
00B8:  BCF    31.3
00B9:  BTFSC  05.2
00BA:  BSF    31.3
.................... 		oddevenbit=1; 
00BB:  BSF    31.0
.................... 		setup_timer_1(T1_internal|T1_div_by_1); 
00BC:  MOVLW  05
00BD:  MOVWF  10
.................... 		set_timer1(0xffff-350);  // delay  till the next call st to 73 us/////old value 350 
00BE:  CLRF   0E
00BF:  MOVLW  FE
00C0:  MOVWF  0F
00C1:  MOVLW  A1
00C2:  MOVWF  0E
.................... 		readData();  // function  get the dat from the conditions of a and b 
.................... 					 
.................... 	} 
.................... return(0); 
*
0137:  MOVLW  00
0138:  MOVWF  21
.................... } 
....................  
0139:  BCF    0C.0
013A:  BCF    0A.3
013B:  GOTO   02D
.................... #int_RTCC 
.................... RTCC_isr() 
.................... {	 
.................... 	 
.................... 	reset_flag=1; 
013C:  BSF    4C.3
.................... /* 
.................... 	if(FadeRateCount>0) 
.................... 	{ 
.................... 		FadeRateCount--; 
.................... 	} 
.................... 	else 
.................... 	{ 
.................... 		FadeRateCount=FadeRate; 
.................... 	} 
.................... */ 
.................... 	dly--; 
013D:  DECFSZ 3D,F
....................   	if (dly == 0) 
013E:  GOTO   145
....................   	{	 
....................       dly = 4; 
013F:  MOVLW  04
0140:  MOVWF  3D
....................       if(settling_time < 250) 
0141:  MOVF   3B,W
0142:  SUBLW  F9
0143:  BTFSC  03.0
....................       { 
....................           settling_time++; 
0144:  INCF   3B,F
....................       }               
....................    } 
.................... 	if(ECCPASE==1 && restart_delay>2) // event just occurred and is not ready for reset 
0145:  BTFSS  17.7
0146:  GOTO   15C
0147:  MOVF   62,F
0148:  BTFSS  03.2
0149:  GOTO   154
014A:  MOVF   61,F
014B:  BTFSS  03.2
014C:  GOTO   154
014D:  MOVF   60,F
014E:  BTFSS  03.2
014F:  GOTO   154
0150:  MOVF   5F,W
0151:  SUBLW  02
0152:  BTFSC  03.0
0153:  GOTO   15C
.................... 		{ 
.................... 			restart_delay--; 
0154:  MOVLW  FF
0155:  ADDWF  5F,F
0156:  BTFSS  03.0
0157:  ADDWF  60,F
0158:  BTFSS  03.0
0159:  ADDWF  61,F
015A:  BTFSS  03.0
015B:  ADDWF  62,F
.................... 		} 
015C:  BCF    0B.2
015D:  BCF    0A.3
015E:  GOTO   02D
.................... } 
....................  
....................  
.................... void main(void) 
*
062D:  MOVF   03,W
062E:  ANDLW  1F
062F:  MOVWF  03
0630:  MOVLW  61
0631:  BSF    03.5
0632:  MOVWF  0F
0633:  MOVF   0F,W
0634:  MOVLW  04
0635:  BCF    03.5
0636:  MOVWF  3D
0637:  BCF    31.6
0638:  MOVLW  D4
0639:  MOVWF  47
063A:  MOVLW  01
063B:  MOVWF  4E
063C:  MOVLW  2C
063D:  MOVWF  4D
063E:  CLRF   52
063F:  CLRF   53
0640:  MOVLW  0A
0641:  MOVWF  5A
0642:  BCF    4C.3
0643:  CLRF   5E
0644:  CLRF   5D
0645:  CLRF   5C
0646:  CLRF   5B
0647:  CLRF   62
0648:  CLRF   61
0649:  CLRF   60
064A:  CLRF   5F
064B:  CLRF   63
064C:  BCF    1F.6
064D:  MOVLW  00
064E:  BSF    03.5
064F:  MOVWF  11
0650:  BCF    03.5
0651:  CLRF   1A
0652:  MOVLW  07
0653:  MOVWF  19
....................  
.................... { 
.................... 	setup_wdt(WDT_ON); 
*
0655:  BSF    18.0
.................... 	setup_wdt(WDT_72MS|WDT_TIMES_16);		//~1.1 s reset	 
0656:  MOVLW  11
0657:  MOVWF  18
0658:  MOVLW  0A
0659:  MOVWF  20
065A:  CLRF   01
065B:  MOVLW  81
065C:  MOVWF  04
065D:  MOVF   00,W
065E:  ANDLW  F0
065F:  IORLW  07
0660:  MOVWF  00
0661:  CLRWDT
0662:  MOVF   00,W
0663:  ANDLW  F7
0664:  BTFSC  20.3
0665:  ANDLW  F0
0666:  IORWF  20,W
0667:  MOVWF  00
.................... 	init_from_eeprom(); 
0668:  CALL   15F
.................... 	init();		 
0669:  GOTO   1CD
.................... 	GroupSelectReg = MAKE16(read_EEPROM (Group_815Store ),read_EEPROM (Group_07Store));	 
066A:  MOVLW  05
066B:  BSF    03.5
066C:  MOVWF  1B
066D:  BCF    1C.7
066E:  BSF    1C.0
066F:  MOVF   1A,W
0670:  BCF    03.5
0671:  MOVWF  64
0672:  MOVLW  04
0673:  BSF    03.5
0674:  MOVWF  1B
0675:  BCF    1C.7
0676:  BSF    1C.0
0677:  MOVF   1A,W
0678:  BCF    03.5
0679:  MOVWF  65
067A:  MOVF   64,W
067B:  MOVWF  50
067C:  MOVF   65,W
067D:  MOVWF  4F
.................... 	PowerOnLevel = read_EEPROM (PowerOnLevelStore); 
067E:  BSF    03.5
067F:  CLRF   1B
0680:  BCF    1C.7
0681:  BSF    1C.0
0682:  MOVF   1A,W
0683:  BCF    03.5
0684:  MOVWF  56
.................... 	if(PowerOnLevel<= MinimumLevel) 
0685:  MOVF   56,W
0686:  SUBWF  54,W
0687:  BTFSS  03.0
0688:  GOTO   690
.................... 	{ 
.................... 		output_low(pin_c2); 
0689:  BSF    03.5
068A:  BCF    07.2
068B:  BCF    03.5
068C:  BCF    07.2
.................... 		duty=0; 
068D:  CLRF   38
.................... 		lamp_off();				 
068E:  CALL   256
.................... 	} 
068F:  GOTO   69A
.................... 	else 
.................... 	{ 
.................... 		output_high(pin_c2); 
0690:  BSF    03.5
0691:  BCF    07.2
0692:  BCF    03.5
0693:  BSF    07.2
.................... 		duty = PowerOnLevel; 
0694:  MOVF   56,W
0695:  MOVWF  38
.................... 		SetDimmLevel(duty);		 
0696:  MOVF   38,W
0697:  MOVWF  64
0698:  CALL   20A
.................... 		lamp_on();		 
0699:  CALL   25A
.................... 	} 
.................... 	restart_delay=3000;				// initial restart delay 
069A:  CLRF   62
069B:  CLRF   61
069C:  MOVLW  0B
069D:  MOVWF  60
069E:  MOVLW  B8
069F:  MOVWF  5F
.................... 	restart_count=0;				// initial restart counts 
06A0:  CLRF   5E
06A1:  CLRF   5D
06A2:  CLRF   5C
06A3:  CLRF   5B
.................... 	ECCPASE=0;						// Restart operation 
06A4:  BCF    17.7
....................  
.................... start: 
....................  
.................... 	if(restart_delay<=2 && ECCPASE==1)			// restart after variable delay 
06A5:  MOVF   62,F
06A6:  BTFSS  03.2
06A7:  GOTO   713
06A8:  MOVF   61,F
06A9:  BTFSS  03.2
06AA:  GOTO   713
06AB:  MOVF   60,F
06AC:  BTFSS  03.2
06AD:  GOTO   713
06AE:  MOVF   5F,W
06AF:  SUBLW  02
06B0:  BTFSS  03.0
06B1:  GOTO   713
06B2:  BTFSS  17.7
06B3:  GOTO   713
.................... 	{ 
.................... 		ECCPASE=0;								// PWM restart operation 
06B4:  BCF    17.7
.................... 		restart_count++;						// Increment restart event counter 
06B5:  MOVLW  01
06B6:  ADDWF  5B,F
06B7:  BTFSC  03.0
06B8:  INCF   5C,F
06B9:  BTFSC  03.2
06BA:  INCF   5D,F
06BB:  BTFSC  03.2
06BC:  INCF   5E,F
.................... 		restart_delay=restart_delay+restart_count*5000;		// Increasing the restart delay 
06BD:  MOVF   5E,W
06BE:  MOVWF  67
06BF:  MOVF   5D,W
06C0:  MOVWF  66
06C1:  MOVF   5C,W
06C2:  MOVWF  65
06C3:  MOVF   5B,W
06C4:  MOVWF  64
06C5:  CLRF   6B
06C6:  CLRF   6A
06C7:  MOVLW  13
06C8:  MOVWF  69
06C9:  MOVLW  88
06CA:  MOVWF  68
06CB:  GOTO   260
06CC:  MOVF   20,W
06CD:  ADDWF  5F,F
06CE:  MOVF   21,W
06CF:  BTFSC  03.0
06D0:  INCFSZ 21,W
06D1:  ADDWF  60,F
06D2:  MOVF   22,W
06D3:  BTFSC  03.0
06D4:  INCFSZ 22,W
06D5:  ADDWF  61,F
06D6:  MOVF   23,W
06D7:  BTFSC  03.0
06D8:  INCFSZ 23,W
06D9:  ADDWF  62,F
.................... 		if(restart_delay>30000)					// Permanent shutdown after many restart attempts 
06DA:  MOVF   62,F
06DB:  BTFSS  03.2
06DC:  GOTO   6EB
06DD:  MOVF   61,F
06DE:  BTFSS  03.2
06DF:  GOTO   6EB
06E0:  MOVF   60,W
06E1:  SUBLW  74
06E2:  BTFSC  03.0
06E3:  GOTO   713
06E4:  XORLW  FF
06E5:  BTFSS  03.2
06E6:  GOTO   6EB
06E7:  MOVF   5F,W
06E8:  SUBLW  30
06E9:  BTFSC  03.0
06EA:  GOTO   713
.................... 		{ 
.................... 			output_low(pin_c2); 
06EB:  BSF    03.5
06EC:  BCF    07.2
06ED:  BCF    03.5
06EE:  BCF    07.2
.................... 			failure_count++;					// Failed to turn ON 
06EF:  INCF   63,F
.................... 			if(failure_count>254) 
06F0:  MOVF   63,W
06F1:  SUBLW  FE
06F2:  BTFSC  03.0
06F3:  GOTO   6F6
.................... 			{ 
.................... 				failure_count=254; 
06F4:  MOVLW  FE
06F5:  MOVWF  63
.................... 			} 
.................... 			write_eeprom(SystemFailureRateStore,failure_count); 
06F6:  MOVF   0B,W
06F7:  MOVWF  20
06F8:  BCF    0B.7
06F9:  MOVLW  19
06FA:  BSF    03.5
06FB:  MOVWF  1B
06FC:  BCF    03.5
06FD:  MOVF   63,W
06FE:  BSF    03.5
06FF:  MOVWF  1A
0700:  BCF    1C.7
0701:  BSF    1C.2
0702:  MOVLW  55
0703:  MOVWF  1D
0704:  MOVLW  AA
0705:  MOVWF  1D
0706:  BSF    1C.1
0707:  BTFSC  1C.1
0708:  GOTO   707
0709:  BCF    1C.2
070A:  BCF    03.5
070B:  MOVF   20,W
070C:  IORWF  0B,F
.................... 			delay_us(10);			 
070D:  MOVLW  02
070E:  MOVWF  20
070F:  DECFSZ 20,F
0710:  GOTO   70F
0711:  GOTO   712
0712:  NOP
.................... 		}		 
.................... 	} 
.................... 	 
.................... 	if(reset_flag==1) 
0713:  BTFSS  4C.3
0714:  GOTO   717
.................... 	{ 
.................... 	restart_wdt();  
0715:  CLRWDT
.................... 	reset_flag=0; 
0716:  BCF    4C.3
.................... 	} 
.................... 		 
.................... 	if (dataReady ==1) 
0717:  BTFSS  31.7
0718:  GOTO   745
.................... 	{ 
.................... 		if(address == 0xff) 
0719:  INCFSZ 49,W
071A:  GOTO   71D
.................... 		{ 
.................... 			handle();  
071B:  CALL   369
.................... 		}		 
071C:  GOTO   744
.................... 		else if(address==lampid)		{ 
071D:  MOVF   5A,W
071E:  SUBWF  49,W
071F:  BTFSS  03.2
0720:  GOTO   723
.................... 			 
.................... 			handle();  
0721:  CALL   369
.................... 		}		 
0722:  GOTO   744
....................     	else if(address == zoneid) 
0723:  MOVF   47,W
0724:  SUBWF  49,W
0725:  BTFSS  03.2
0726:  GOTO   729
.................... 		{ 
.................... 			handle();	 
0727:  CALL   369
.................... 		} 
0728:  GOTO   744
.................... 		else if(address>191 && address<208) 
0729:  MOVF   49,W
072A:  SUBLW  BF
072B:  BTFSC  03.0
072C:  GOTO   744
072D:  MOVF   49,W
072E:  SUBLW  CF
072F:  BTFSS  03.0
0730:  GOTO   744
.................... 		{	 
.................... 			gindex = address &0x0F; 
0731:  MOVF   49,W
0732:  ANDLW  0F
0733:  MOVWF  51
.................... 			if ( bit_test (GroupSelectReg, gindex)==1) 
0734:  MOVF   50,W
0735:  MOVWF  23
0736:  MOVF   4F,W
0737:  MOVWF  22
0738:  MOVF   51,W
0739:  MOVWF  20
073A:  BTFSC  03.2
073B:  GOTO   741
073C:  BCF    03.0
073D:  RRF    23,F
073E:  RRF    22,F
073F:  DECFSZ 20,F
0740:  GOTO   73C
0741:  MOVF   22,W
0742:  BTFSC  22.0
.................... 			{ 				 
.................... 				handle(); 
0743:  CALL   369
.................... 			}	 
.................... 		} 
.................... 		dataReady =0; 
0744:  BCF    31.7
.................... 	} 
.................... 	if(txmit_error==1 && txmit_count<5) 
0745:  BTFSS  31.6
0746:  GOTO   751
0747:  MOVF   52,W
0748:  SUBLW  04
0749:  BTFSS  03.0
074A:  GOTO   751
.................... 	{ 
.................... 		txmit_count++; 
074B:  INCF   52,F
.................... 		txmit(2,2); 
074C:  MOVLW  02
074D:  MOVWF  64
074E:  MOVWF  65
074F:  CALL   2FA
.................... 	}	 
0750:  GOTO   752
.................... 	else 
.................... 	{ 
.................... 		txmit_count=0; 
0751:  CLRF   52
.................... 	} 
.................... 	 
.................... 	goto start; 
0752:  GOTO   6A5
.................... } 
....................  
0753:  SLEEP
.................... void init(void) 
....................  
.................... { 
.................... 	setup_timer_2(T2_DIV_BY_1,249,1);		//250 us overflow, 250 us interrupt  // 4000Hz 
*
01CD:  MOVLW  00
01CE:  MOVWF  21
01CF:  IORLW  04
01D0:  MOVWF  12
01D1:  MOVLW  F9
01D2:  BSF    03.5
01D3:  MOVWF  12
.................... 	setup_ccp1(CCP_PWM|CCP_SHUTDOWN_ON_COMP2|CCP_SHUTDOWN_AC_L|CCP_SHUTDOWN_BD_L);	// Setting up PWM 
01D4:  BCF    07.5
01D5:  BCF    03.5
01D6:  BCF    07.5
01D7:  MOVLW  0C
01D8:  MOVWF  15
01D9:  CLRF   16
01DA:  MOVLW  20
01DB:  MOVWF  17
.................... 	setup_comparator(A0_VR_C0_VR);				// Setting up comparator 
01DC:  CLRF   1A
01DD:  MOVLW  0A
01DE:  MOVWF  19
01DF:  BSF    03.5
01E0:  MOVF   05,W
01E1:  IORLW  10
01E2:  MOVWF  05
01E3:  MOVLW  02
01E4:  BCF    03.5
01E5:  MOVWF  20
01E6:  DECFSZ 20,F
01E7:  GOTO   1E6
01E8:  GOTO   1E9
01E9:  NOP
01EA:  MOVF   19,W
01EB:  BCF    0C.3
.................... 	setup_vref(VREF_LOW|1);						// Setting up reference voltage 
01EC:  MOVLW  A1
01ED:  BSF    03.5
01EE:  MOVWF  19
.................... 	PRSEN=0;									// Auto-restart disabled 
01EF:  BCF    03.5
01F0:  BCF    16.7
.................... 	CCMCON0=1;									// Comparator output inverted 
01F1:  BSF    19.5
....................  
.................... 	setup_timer_0(RTCC_INTERNAL|RTCC_DIV_1); 
01F2:  BSF    03.5
01F3:  MOVF   01,W
01F4:  ANDLW  C7
01F5:  IORLW  08
01F6:  MOVWF  01
.................... 	setup_timer_1(T1_internal|T1_div_by_1); 
01F7:  MOVLW  05
01F8:  BCF    03.5
01F9:  MOVWF  10
.................... 	timerOnOff=0; 
01FA:  BCF    10.0
.................... 	clear_interrupt(int_ext); 
01FB:  BCF    0B.1
.................... 	ext_int_edge( H_TO_L );	 
01FC:  BSF    03.5
01FD:  BCF    01.6
.................... 	enable_interrupts(INT_EXT); 
01FE:  BCF    03.5
01FF:  BSF    0B.4
.................... 	enable_interrupts(INT_RTCC); 
0200:  BSF    0B.5
.................... 	disable_interrupts(INT_TIMER2); 
0201:  BSF    03.5
0202:  BCF    0C.1
.................... 	enable_interrupts(global);	 
0203:  MOVLW  C0
0204:  BCF    03.5
0205:  IORWF  0B,F
.................... 	settling_time =23; 
0206:  MOVLW  17
0207:  MOVWF  3B
.................... 	dataReady =0;   
0208:  BCF    31.7
.................... 	return; 
0209:  GOTO   66A (RETURN)
.................... } 
....................  
.................... void handle(void ) 
.................... { 
.................... 	commands(); 
.................... 	delay_ms(2); 
*
0616:  MOVLW  02
0617:  MOVWF  64
.................... 	RetryCount =0; 
*
062B:  CLRF   46
.................... 	return; 
062C:  RETURN
.................... } 
....................  
....................  
.................... //				trnsmission of  bit 1			// 
.................... /********************************************************************* 
....................  * Function:       void txmit0(void); 
....................  * 
....................  * PreCondition:    None 
....................  * 
....................  * Input:           None 
....................  * 
....................  * Output:          transmission of  bit 1 to the bus	 
....................  * 
....................  * Side Effects:    None 
....................  * 
....................  * Note:            None 
.................... **********************************************************************/ 
....................  
.................... void txmit1(void) 
....................  
.................... {      
....................   	txmit_error = 0; 
*
028A:  BCF    31.6
.................... 	if (input(rx)==1) 
028B:  BSF    03.5
028C:  BSF    05.2
028D:  BCF    03.5
028E:  BTFSS  05.2
028F:  GOTO   294
.................... 	{   
.................... 		output_bit(tx,0); 
0290:  BCF    05.0
0291:  BSF    03.5
0292:  BCF    05.0
0293:  BCF    03.5
.................... 	} 
.................... 	delay_us(79); 
0294:  MOVLW  19
0295:  MOVWF  20
0296:  DECFSZ 20,F
0297:  GOTO   296
0298:  GOTO   299
0299:  NOP
.................... 	if (input(rx)==1) 
029A:  BSF    03.5
029B:  BSF    05.2
029C:  BCF    03.5
029D:  BTFSS  05.2
029E:  GOTO   2A5
.................... 	{ 
.................... 		output_bit(tx,1); 
029F:  BSF    05.0
02A0:  BSF    03.5
02A1:  BCF    05.0
.................... 		txmit_error = 1; 
02A2:  BCF    03.5
02A3:  BSF    31.6
.................... 		return; 
02A4:  GOTO   2DC
.................... 	}			   
.................... 	delay_us(290);//345 
02A5:  MOVLW  60
02A6:  MOVWF  20
02A7:  DECFSZ 20,F
02A8:  GOTO   2A7
02A9:  NOP
.................... 	if (input(rx)==0) 
02AA:  BSF    03.5
02AB:  BSF    05.2
02AC:  BCF    03.5
02AD:  BTFSC  05.2
02AE:  GOTO   2B4
.................... 	{ 
.................... 		output_bit(tx,1); 
02AF:  BSF    05.0
02B0:  BSF    03.5
02B1:  BCF    05.0
.................... 	} 
02B2:  GOTO   2BB
02B3:  BCF    03.5
.................... 	else 
.................... 	{ 
.................... 		output_bit(tx,1); 
02B4:  BSF    05.0
02B5:  BSF    03.5
02B6:  BCF    05.0
.................... 		txmit_error = 1; 
02B7:  BCF    03.5
02B8:  BSF    31.6
.................... 		return; 
02B9:  GOTO   2DC
02BA:  BSF    03.5
.................... 	} 
.................... 	delay_us(79); 
02BB:  MOVLW  19
02BC:  BCF    03.5
02BD:  MOVWF  20
02BE:  DECFSZ 20,F
02BF:  GOTO   2BE
02C0:  GOTO   2C1
02C1:  NOP
.................... 	if (input(rx)==0) 
02C2:  BSF    03.5
02C3:  BSF    05.2
02C4:  BCF    03.5
02C5:  BTFSC  05.2
02C6:  GOTO   2CD
.................... 	{ 
.................... 		output_bit(tx,1); 
02C7:  BSF    05.0
02C8:  BSF    03.5
02C9:  BCF    05.0
.................... 		txmit_error = 1; 
02CA:  BCF    03.5
02CB:  BSF    31.6
.................... 		return; 
02CC:  GOTO   2DC
.................... 	} 
....................     delay_us(290); 
02CD:  MOVLW  60
02CE:  MOVWF  20
02CF:  DECFSZ 20,F
02D0:  GOTO   2CF
02D1:  NOP
.................... 	if (input(rx)==0) 
02D2:  BSF    03.5
02D3:  BSF    05.2
02D4:  BCF    03.5
02D5:  BTFSC  05.2
02D6:  GOTO   2DC
.................... 	{ 
.................... 		output_bit(tx,1); 
02D7:  BSF    05.0
02D8:  BSF    03.5
02D9:  BCF    05.0
.................... 		txmit_error = 1; 
02DA:  BCF    03.5
02DB:  BSF    31.6
.................... 		return; 
.................... 	} 
....................     return; 
02DC:  RETURN
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... //         transmission of 0 to the bus      // 
.................... /********************************************************************* 
....................  * Function:       void txmit0(void); 
....................  * 
....................  * PreCondition:    None 
....................  * 
....................  * Input:           None 
....................  * 
....................  * Output:          transmission of  0 bit to the bus	 
....................  * 
....................  * Side Effects:    None 
....................  * 
....................  * Note:            None 
.................... **********************************************************************/ 
....................  
.................... void txmit0(void) 
....................  
.................... { 
.................... 	txmit_error = 0;	 
*
0316:  BCF    31.6
.................... 	output_bit(tx,1); 
0317:  BSF    05.0
0318:  BSF    03.5
0319:  BCF    05.0
.................... 	delay_us(79); 
031A:  MOVLW  19
031B:  BCF    03.5
031C:  MOVWF  20
031D:  DECFSZ 20,F
031E:  GOTO   31D
031F:  GOTO   320
0320:  NOP
.................... 	if (input(rx)!=1) 
0321:  BSF    03.5
0322:  BSF    05.2
0323:  BCF    03.5
0324:  BTFSC  05.2
0325:  GOTO   328
.................... 	{		 
.................... 		txmit_error = 1; 
0326:  BSF    31.6
.................... 		return; 
0327:  GOTO   357
.................... 	}    
.................... 	delay_us(290); 
0328:  MOVLW  60
0329:  MOVWF  20
032A:  DECFSZ 20,F
032B:  GOTO   32A
032C:  NOP
.................... 	if (input(rx)==1) 
032D:  BSF    03.5
032E:  BSF    05.2
032F:  BCF    03.5
0330:  BTFSS  05.2
0331:  GOTO   337
.................... 	{ 
.................... 		output_bit(tx,0); 
0332:  BCF    05.0
0333:  BSF    03.5
0334:  BCF    05.0
.................... 	} 
0335:  GOTO   33E
0336:  BCF    03.5
....................     else 
.................... 	{ 
.................... 		output_bit(tx,1); 
0337:  BSF    05.0
0338:  BSF    03.5
0339:  BCF    05.0
.................... 		txmit_error = 1; 
033A:  BCF    03.5
033B:  BSF    31.6
.................... 		return; 
033C:  GOTO   357
033D:  BSF    03.5
.................... 	} 
....................     delay_us(79); 
033E:  MOVLW  19
033F:  BCF    03.5
0340:  MOVWF  20
0341:  DECFSZ 20,F
0342:  GOTO   341
0343:  GOTO   344
0344:  NOP
....................     if (input(rx)==1) 
0345:  BSF    03.5
0346:  BSF    05.2
0347:  BCF    03.5
0348:  BTFSS  05.2
0349:  GOTO   34C
.................... 	{		 
.................... 		txmit_error = 1; 
034A:  BSF    31.6
.................... 		return; 
034B:  GOTO   357
.................... 	} 
....................     delay_us(290); 
034C:  MOVLW  60
034D:  MOVWF  20
034E:  DECFSZ 20,F
034F:  GOTO   34E
0350:  NOP
.................... 	if (input(rx)==1) 
0351:  BSF    03.5
0352:  BSF    05.2
0353:  BCF    03.5
0354:  BTFSS  05.2
0355:  GOTO   357
.................... 	{		 
.................... 		txmit_error = 1; 
0356:  BSF    31.6
.................... 		return; 
.................... 	} 
....................     return; 
.................... } 
.................... //----------------------------------------------------------------------------- 
....................                    // txmit2 bit 
.................... //----------------------------------------------------------------------------- 
....................  
.................... void txmit(char priority,char length) 
.................... {  
.................... 	 
....................      j= 8*length; 
*
02FA:  RLF    65,W
02FB:  MOVWF  3E
02FC:  RLF    3E,F
02FD:  RLF    3E,F
02FE:  MOVLW  F8
02FF:  ANDWF  3E,F
.................... 	 while (settling_time < 12+Fixlampid);     // priority 
0300:  MOVF   3B,W
0301:  SUBLW  15
0302:  BTFSC  03.0
0303:  GOTO   300
....................      disable_interrupts(global); 
0304:  BCF    0B.6
0305:  BCF    0B.7
0306:  BTFSC  0B.7
0307:  GOTO   305
....................      txmit1();        // start bit   
0308:  CALL   28A
....................      for(i=0;i<j;i++) 
0309:  CLRF   3C
030A:  MOVF   3E,W
030B:  SUBWF  3C,W
030C:  BTFSC  03.0
030D:  GOTO   35B
....................          { 
....................             if (shift_left(tx_buffer,3,1)==1) 
030E:  BSF    03.0
030F:  RLF    3F,F
0310:  RLF    40,F
0311:  RLF    41,F
0312:  BTFSS  03.0
0313:  GOTO   316
....................             { 
....................                  txmit1(); 
0314:  CALL   28A
....................             } 
0315:  GOTO   357
....................             else 
....................             { 
....................                   txmit0(); 
....................             } 
....................             if (txmit_error ==1) 
*
0357:  BTFSC  31.6
....................             { 
.................... 			//	output_low(pin_c3); 
....................                goto rr; 
0358:  GOTO   35F
....................             }		 
0359:  INCF   3C,F
035A:  GOTO   30A
....................          }         
....................      stopbit();     
035B:  CALL   2DD
....................      stopbit();  
035C:  CALL   2DD
.................... 	stopbit(); stopbit(); 
035D:  CALL   2DD
035E:  CALL   2DD
.................... rr:  output_bit(tx,1); 
035F:  BSF    05.0
0360:  BSF    03.5
0361:  BCF    05.0
.................... 	 settling_time = 0; 
0362:  BCF    03.5
0363:  CLRF   3B
....................      intf =0; 
0364:  BCF    0B.1
....................      enable_interrupts(global);	 
0365:  MOVLW  C0
0366:  IORWF  0B,F
.................... 	 enable_interrupts(INT_RTCC); 
0367:  BSF    0B.5
....................      return; 
0368:  RETURN
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
....................           // stop bit function // 
.................... //-------------------------------------------------------------------------- 
.................... void  stopbit(void) 
.................... { 
....................       output_bit(tx,1); 
*
02DD:  BSF    05.0
02DE:  BSF    03.5
02DF:  BCF    05.0
.................... 	  //restart_wdt();  
....................       delay_us(830); 
02E0:  MOVLW  05
02E1:  BCF    03.5
02E2:  MOVWF  66
02E3:  MOVLW  A3
02E4:  MOVWF  67
*
02F7:  DECFSZ 66,F
02F8:  GOTO   2E3
....................       return; 
02F9:  RETURN
.................... } 
....................  
.................... //-------------------------------------------------------------------------- 
....................  
....................  
.................... void readData(void) 
.................... { 
.................... 	//restart_wdt();  
....................       error_flag=0; 
*
00C3:  BCF    31.4
....................       datacount++; 
00C4:  INCF   32,F
....................       forwrdFrameFlag = 0; 
00C5:  BCF    4C.0
.................... 	  backwardFrameFlag =0; 
00C6:  BCF    4C.1
....................       if(datacount< 27) 
00C7:  MOVF   32,W
00C8:  SUBLW  1A
00C9:  BTFSS  03.0
00CA:  GOTO   12E
....................       { 
....................          if((a==0 )&& (b==1)) 
00CB:  BTFSC  31.1
00CC:  GOTO   0D4
00CD:  BTFSS  31.3
00CE:  GOTO   0D4
....................          { 
....................             shift_left(data,3,1);  // a one  detewcted on bus  
00CF:  BSF    03.0
00D0:  RLF    33,F
00D1:  RLF    34,F
00D2:  RLF    35,F
....................          } 
00D3:  GOTO   12D
....................          else if((a==1)&&(b==0)) 
00D4:  BTFSS  31.1
00D5:  GOTO   0DD
00D6:  BTFSC  31.3
00D7:  GOTO   0DD
....................          { 
....................             shift_left(data,3,0);  // a zero is  deted on the bus  
00D8:  BCF    03.0
00D9:  RLF    33,F
00DA:  RLF    34,F
00DB:  RLF    35,F
....................          } 
00DC:  GOTO   12D
....................          else if ( a==1 && b==1) 
00DD:  BTFSS  31.1
00DE:  GOTO   124
00DF:  BTFSS  31.3
00E0:  GOTO   124
....................          { 
....................             switch (datacount) 
00E1:  MOVF   32,W
00E2:  XORLW  11
00E3:  BTFSC  03.2
00E4:  GOTO   0EF
00E5:  XORLW  03
00E6:  BTFSC  03.2
00E7:  GOTO   0F1
00E8:  XORLW  0B
00E9:  BTFSC  03.2
00EA:  GOTO   105
00EB:  XORLW  03
00EC:  BTFSC  03.2
00ED:  GOTO   107
00EE:  GOTO   11A
....................             { 
....................                case 17: 
....................                { 
....................                      stopBitCount ++; 
00EF:  INCF   48,F
....................                      break; 
00F0:  GOTO   123
....................                } 
....................                case 18: 
....................                { 
....................                   stopBitCount ++; 
00F1:  INCF   48,F
....................                   if(stopBitCount == 2) 
00F2:  MOVF   48,W
00F3:  SUBLW  02
00F4:  BTFSS  03.2
00F5:  GOTO   0FD
....................                   { 
....................                         r_a=1;  
00F6:  MOVLW  01
00F7:  MOVWF  42
....................                         copyData(); 
00F8:  CALL   059
....................                         forwrdFrameFlag = 1; 
00F9:  BSF    4C.0
....................                         masterflag = 0; 
00FA:  BCF    4C.2
....................                         backwardFrameFlag =0; 
00FB:  BCF    4C.1
....................  
....................                   } 
00FC:  GOTO   104
....................                   else 
....................                   { 
.................... 						error_flag =1; 
00FD:  BSF    31.4
.................... 						clear_interrupt(int_ext); 
00FE:  BCF    0B.1
.................... 						enable_interrupts(INT_EXT); 
00FF:  BSF    0B.4
....................     				  disable_interrupts(int_timer1); 
0100:  BSF    03.5
0101:  BCF    0C.0
....................     		          enable_interrupts(INT_RTCC); 
0102:  BCF    03.5
0103:  BSF    0B.5
....................                   } 
....................                   break; 
0104:  GOTO   123
....................                } 
....................               	case 25: 
.................... 				{ 
.................... 					stopBitCount ++; 
0105:  INCF   48,F
.................... 					break; 
0106:  GOTO   123
.................... 				} 
....................               	case 26:  
.................... 				{ 
.................... 					stopBitCount ++; 
0107:  INCF   48,F
.................... 					if(stopBitCount == 2) 
0108:  MOVF   48,W
0109:  SUBLW  02
010A:  BTFSS  03.2
010B:  GOTO   112
.................... 					{ 
.................... 						r_a=0;  
010C:  CLRF   42
.................... 						copyData(); 
010D:  CALL   059
.................... 						forwrdFrameFlag =0; 
010E:  BCF    4C.0
.................... 						masterflag = 1; 
010F:  BSF    4C.2
.................... 						backwardFrameFlag =0; 
0110:  BCF    4C.1
.................... 					} 
0111:  GOTO   119
.................... 					else 
.................... 					{ 
.................... 						error_flag =1; 
0112:  BSF    31.4
.................... 						clear_interrupt(int_ext); 
0113:  BCF    0B.1
.................... 						enable_interrupts(INT_EXT); 
0114:  BSF    0B.4
....................     				  disable_interrupts(int_timer1); 
0115:  BSF    03.5
0116:  BCF    0C.0
....................     		          enable_interrupts(INT_RTCC); 
0117:  BCF    03.5
0118:  BSF    0B.5
.................... 					} 
.................... 					break; 
0119:  GOTO   123
.................... 				} 
....................                 default: 
....................                 { 
....................                       error_flag=1; 
011A:  BSF    31.4
....................                       timerOnOff=0; 
011B:  BCF    10.0
.................... 					  clear_interrupt(int_ext); 
011C:  BCF    0B.1
....................                       enable_interrupts(INT_EXT); 
011D:  BSF    0B.4
....................     				  disable_interrupts(int_timer1); 
011E:  BSF    03.5
011F:  BCF    0C.0
....................     		          enable_interrupts(INT_RTCC); 
0120:  BCF    03.5
0121:  BSF    0B.5
....................                       settling_time = 0; 
0122:  CLRF   3B
....................                       break; 
....................                 } 
....................              }    
....................           }  
0123:  GOTO   12D
.................... 		else 
.................... 		{ 
.................... 			error_flag=1;     
0124:  BSF    31.4
.................... 			settling_time = 0; 
0125:  CLRF   3B
.................... 			timerOnOff=0;     
0126:  BCF    10.0
.................... 			clear_interrupt(int_ext);    
0127:  BCF    0B.1
.................... 			enable_interrupts(INT_EXT); 
0128:  BSF    0B.4
....................     		disable_interrupts(int_timer1); 
0129:  BSF    03.5
012A:  BCF    0C.0
....................     		enable_interrupts(INT_RTCC);          
012B:  BCF    03.5
012C:  BSF    0B.5
.................... 		} 
....................       } 
012D:  GOTO   137
.................... 	else  // the  data count grater than 27  
.................... 	{ 
.................... 		over_flowflag =1 ; 
012E:  BSF    31.5
.................... 		settling_time = 0; 
012F:  CLRF   3B
.................... 		timerOnOff=0;    
0130:  BCF    10.0
.................... 		clear_interrupt(int_ext);     
0131:  BCF    0B.1
.................... 		enable_interrupts(INT_EXT); 
0132:  BSF    0B.4
....................         disable_interrupts(int_timer1); 
0133:  BSF    03.5
0134:  BCF    0C.0
....................         enable_interrupts(INT_RTCC);         
0135:  BCF    03.5
0136:  BSF    0B.5
.................... 	} 
....................     return; 
.................... } 
....................  
....................  
....................  
....................  
.................... void copyData(void) 
.................... {  
.................... 	dataReady =1;     
*
0059:  BSF    31.7
.................... 	if( r_a==1) 
005A:  DECFSZ 42,W
005B:  GOTO   061
.................... 	{ 
.................... 		address = data[1]; 
005C:  MOVF   34,W
005D:  MOVWF  49
.................... 		command =data[0];						 
005E:  MOVF   33,W
005F:  MOVWF  4A
.................... 	} 
0060:  GOTO   06A
.................... 	else if( r_a==0) 
0061:  MOVF   42,F
0062:  BTFSS  03.2
0063:  GOTO   06A
.................... 	{	 
.................... 		address = data[2]; 
0064:  MOVF   35,W
0065:  MOVWF  49
.................... 		command =data[1]; 
0066:  MOVF   34,W
0067:  MOVWF  4A
.................... 		databyte=data[0];  
0068:  MOVF   33,W
0069:  MOVWF  4B
.................... 	}        
....................     timerOnOff=0; 
006A:  BCF    10.0
....................     intf =0; 
006B:  BCF    0B.1
.................... 	clear_interrupt(int_ext); 
006C:  BCF    0B.1
....................     enable_interrupts(INT_EXT); 
006D:  BSF    0B.4
....................     disable_interrupts(int_timer1); 
006E:  BSF    03.5
006F:  BCF    0C.0
....................     enable_interrupts(INT_RTCC); 
0070:  BCF    03.5
0071:  BSF    0B.5
....................     settling_time = 0; 
0072:  CLRF   3B
....................     return; 
0073:  RETURN
.................... } 
....................  
....................  
.................... void commands(void) 
.................... {  
.................... 	command_st =0;	 
*
0369:  CLRF   45
.................... 	switch(command) 
036A:  MOVF   4A,W
036B:  XORLW  C9
036C:  BTFSC  03.2
036D:  GOTO   3B1
036E:  XORLW  19
036F:  BTFSC  03.2
0370:  GOTO   3CE
0371:  XORLW  04
0372:  BTFSC  03.2
0373:  GOTO   3E0
0374:  XORLW  0C
0375:  BTFSC  03.2
0376:  GOTO   3E7
0377:  XORLW  29
0378:  BTFSC  03.2
0379:  GOTO   3E7
037A:  XORLW  2D
037B:  BTFSC  03.2
037C:  GOTO   3F2
037D:  XORLW  2C
037E:  BTFSC  03.2
037F:  GOTO   3F2
0380:  XORLW  1A
0381:  BTFSC  03.2
0382:  GOTO   3FD
0383:  XORLW  0D
0384:  BTFSC  03.2
0385:  GOTO   422
0386:  XORLW  EE
0387:  BTFSC  03.2
0388:  GOTO   44A
0389:  XORLW  2B
038A:  BTFSC  03.2
038B:  GOTO   50D
038C:  XORLW  01
038D:  BTFSC  03.2
038E:  GOTO   531
038F:  XORLW  07
0390:  BTFSC  03.2
0391:  GOTO   536
0392:  XORLW  01
0393:  BTFSC  03.2
0394:  GOTO   55D
0395:  XORLW  03
0396:  BTFSC  03.2
0397:  GOTO   566
0398:  XORLW  01
0399:  BTFSC  03.2
039A:  GOTO   575
039B:  XORLW  16
039C:  BTFSC  03.2
039D:  GOTO   583
039E:  XORLW  03
039F:  BTFSC  03.2
03A0:  GOTO   58C
03A1:  XORLW  01
03A2:  BTFSC  03.2
03A3:  GOTO   59B
03A4:  XORLW  19
03A5:  BTFSC  03.2
03A6:  GOTO   5AA
03A7:  XORLW  01
03A8:  BTFSC  03.2
03A9:  GOTO   5CA
03AA:  XORLW  1B
03AB:  BTFSC  03.2
03AC:  GOTO   5EA
03AD:  XORLW  04
03AE:  BTFSC  03.2
03AF:  GOTO   5EC
03B0:  GOTO   5FB
.................... 	{ 
.................... 	   	case 201:	// goto  level  
.................... 		{   
.................... 			 
.................... 			if(databyte>= MaximumLevel ) 
03B1:  MOVF   55,W
03B2:  SUBWF  4B,W
03B3:  BTFSS  03.0
03B4:  GOTO   3BC
.................... 			{ 
.................... 				output_high(pin_c2); 
03B5:  BSF    03.5
03B6:  BCF    07.2
03B7:  BCF    03.5
03B8:  BSF    07.2
.................... 				duty = MaximumLevel;				 
03B9:  MOVF   55,W
03BA:  MOVWF  38
.................... 			} 
03BB:  GOTO   3CC
.................... 			else if(databyte<= MinimumLevel ) 
03BC:  MOVF   4B,W
03BD:  SUBWF  54,W
03BE:  BTFSS  03.0
03BF:  GOTO   3C6
.................... 		    { 
.................... 				output_low(pin_c2); 
03C0:  BSF    03.5
03C1:  BCF    07.2
03C2:  BCF    03.5
03C3:  BCF    07.2
.................... 				duty = 0;								 
03C4:  CLRF   38
.................... 			} 
03C5:  GOTO   3CC
.................... 			else 
.................... 			{ 
.................... 				output_high(pin_c2)	; 
03C6:  BSF    03.5
03C7:  BCF    07.2
03C8:  BCF    03.5
03C9:  BSF    07.2
.................... 				duty =databyte;							 
03CA:  MOVF   4B,W
03CB:  MOVWF  38
.................... 			} 		 
.................... 			lamp_on();										 
03CC:  CALL   25A
.................... 			break; 
03CD:  GOTO   5FD
.................... 		} 
.................... 		case 208:	// on 
.................... 		{   
.................... 			restart_delay=3000; 
03CE:  CLRF   62
03CF:  CLRF   61
03D0:  MOVLW  0B
03D1:  MOVWF  60
03D2:  MOVLW  B8
03D3:  MOVWF  5F
.................... 			restart_count=0; 
03D4:  CLRF   5E
03D5:  CLRF   5D
03D6:  CLRF   5C
03D7:  CLRF   5B
.................... 			output_high(pin_c2);			 
03D8:  BSF    03.5
03D9:  BCF    07.2
03DA:  BCF    03.5
03DB:  BSF    07.2
.................... 			duty = MaximumLevel; 
03DC:  MOVF   55,W
03DD:  MOVWF  38
.................... 			lamp_on();								 
03DE:  CALL   25A
.................... 			break; 
03DF:  GOTO   5FD
.................... 		} 
.................... 		case 212:	//off 
.................... 		{   
.................... 			output_low(pin_c2); 
03E0:  BSF    03.5
03E1:  BCF    07.2
03E2:  BCF    03.5
03E3:  BCF    07.2
.................... 			duty =0; 
03E4:  CLRF   38
.................... 			lamp_off(); 
03E5:  CALL   256
.................... 			break; 
03E6:  GOTO   5FD
.................... 		} 
.................... 		case 216:	//dim 
.................... 		case 241:		//ZONE DIM 
.................... 		{ 
.................... 			if(l_st==1) 
03E7:  DECFSZ 44,W
03E8:  GOTO   3F1
.................... 			{				 
.................... 				if(duty>MinimumLevel) 
03E9:  MOVF   38,W
03EA:  SUBWF  54,W
03EB:  BTFSC  03.0
03EC:  GOTO   3F1
.................... 				{							 
.................... 					duty--; 
03ED:  DECF   38,F
.................... 					SetDimmLevel(duty);					 
03EE:  MOVF   38,W
03EF:  MOVWF  64
03F0:  CALL   20A
.................... 				} 
.................... 			} 
.................... 			break; 
03F1:  GOTO   5FD
.................... 		} 
.................... 		case 220:	//bright					 
.................... 		case 240:  //zone  bright 
.................... 		{ 
.................... 			if(l_st==1) 
03F2:  DECFSZ 44,W
03F3:  GOTO   3FC
.................... 			{			 
.................... 				if(duty < MaximumLevel) 
03F4:  MOVF   55,W
03F5:  SUBWF  38,W
03F6:  BTFSC  03.0
03F7:  GOTO   3FC
.................... 				{									 
.................... 					duty++; 
03F8:  INCF   38,F
.................... 					SetDimmLevel(duty);			 
03F9:  MOVF   38,W
03FA:  MOVWF  64
03FB:  CALL   20A
.................... 				} 
.................... 			} 
.................... 			break; 
03FC:  GOTO   5FD
.................... 		}	 
.................... 	 
.................... 		case 234: // scene select  
.................... 		{				 
.................... 			if(databyte < 17) 
03FD:  MOVF   4B,W
03FE:  SUBLW  10
03FF:  BTFSS  03.0
0400:  GOTO   421
.................... 			{				 
.................... 				currentSceen = databyte;			 
0401:  MOVF   4B,W
0402:  MOVWF  43
.................... 		        duty = read_EEPROM (currentSceen+SceneStore);	 
0403:  MOVLW  06
0404:  ADDWF  43,W
0405:  MOVWF  64
0406:  MOVF   64,W
0407:  BSF    03.5
0408:  MOVWF  1B
0409:  BCF    1C.7
040A:  BSF    1C.0
040B:  MOVF   1A,W
040C:  BCF    03.5
040D:  MOVWF  38
.................... 			     	if(duty<=MinimumLevel) 
040E:  MOVF   38,W
040F:  SUBWF  54,W
0410:  BTFSS  03.0
0411:  GOTO   419
.................... 					{ 
.................... 						duty=0; 
0412:  CLRF   38
.................... 						output_low(pin_c2);				 
0413:  BSF    03.5
0414:  BCF    07.2
0415:  BCF    03.5
0416:  BCF    07.2
.................... 						lamp_off();		 
0417:  CALL   256
.................... 					} 
0418:  GOTO   421
.................... 					else 
.................... 					{	 
.................... 						output_high(pin_c2);								 
0419:  BSF    03.5
041A:  BCF    07.2
041B:  BCF    03.5
041C:  BSF    07.2
.................... 						lamp_on();	 
041D:  CALL   25A
.................... 						SetDimmLevel(duty);		 
041E:  MOVF   38,W
041F:  MOVWF  64
0420:  CALL   20A
.................... 					}			 
.................... 			} 
.................... 			break; 
0421:  GOTO   5FD
.................... 		 } 
.................... 		case 231:  // store sceen  
.................... 		{ 
....................  
.................... 			if(databyte < 17) 
0422:  MOVF   4B,W
0423:  SUBLW  10
0424:  BTFSS  03.0
0425:  GOTO   449
.................... 			{				 
.................... 				disable_interrupts (global); 
0426:  BCF    0B.6
0427:  BCF    0B.7
0428:  BTFSC  0B.7
0429:  GOTO   427
.................... 				write_eeprom(databyte+SceneStore,duty); 
042A:  MOVLW  06
042B:  ADDWF  4B,W
042C:  MOVWF  64
042D:  MOVF   0B,W
042E:  MOVWF  20
042F:  BCF    0B.7
0430:  MOVF   64,W
0431:  BSF    03.5
0432:  MOVWF  1B
0433:  BCF    03.5
0434:  MOVF   38,W
0435:  BSF    03.5
0436:  MOVWF  1A
0437:  BCF    1C.7
0438:  BSF    1C.2
0439:  MOVLW  55
043A:  MOVWF  1D
043B:  MOVLW  AA
043C:  MOVWF  1D
043D:  BSF    1C.1
043E:  BTFSC  1C.1
043F:  GOTO   43E
0440:  BCF    1C.2
0441:  BCF    03.5
0442:  MOVF   20,W
0443:  IORWF  0B,F
.................... 				delay_us(5);			 
0444:  GOTO   445
0445:  GOTO   446
0446:  NOP
.................... 				enable_interrupts(global);	 
0447:  MOVLW  C0
0448:  IORWF  0B,F
.................... 			} 
.................... 			break; 
0449:  GOTO   5FD
.................... 		} 
.................... 		case 9: 
.................... 		{		 
.................... 				GroupSelectReg = MAKE16(read_EEPROM (Group_815Store ),read_EEPROM (Group_07Store));	 
044A:  MOVLW  05
044B:  BSF    03.5
044C:  MOVWF  1B
044D:  BCF    1C.7
044E:  BSF    1C.0
044F:  MOVF   1A,W
0450:  BCF    03.5
0451:  MOVWF  64
0452:  MOVLW  04
0453:  BSF    03.5
0454:  MOVWF  1B
0455:  BCF    1C.7
0456:  BSF    1C.0
0457:  MOVF   1A,W
0458:  BCF    03.5
0459:  MOVWF  65
045A:  MOVF   64,W
045B:  MOVWF  50
045C:  MOVF   65,W
045D:  MOVWF  4F
.................... 				gindex = databyte &0x0f;				 
045E:  MOVF   4B,W
045F:  ANDLW  0F
0460:  MOVWF  51
.................... 				switch (databyte & 0x10) 
0461:  MOVF   4B,W
0462:  ANDLW  10
0463:  BTFSC  03.2
0464:  GOTO   469
0465:  XORLW  10
0466:  BTFSC  03.2
0467:  GOTO   4BD
0468:  GOTO   50C
.................... 				{ 
.................... 					case 0: 
.................... 						{ 
.................... 							bit_clear(GroupSelectReg,gindex); 
0469:  CLRF   23
046A:  MOVLW  01
046B:  MOVWF  22
046C:  MOVF   51,W
046D:  MOVWF  20
046E:  BTFSC  03.2
046F:  GOTO   475
0470:  BCF    03.0
0471:  RLF    22,F
0472:  RLF    23,F
0473:  DECFSZ 20,F
0474:  GOTO   470
0475:  MOVF   22,W
0476:  XORLW  FF
0477:  MOVWF  20
0478:  MOVLW  FF
0479:  XORWF  23,F
047A:  MOVF   20,W
047B:  ANDWF  4F,F
047C:  MOVF   23,W
047D:  ANDWF  50,F
.................... 							write_eeprom(Group_07Store  ,make8(GroupSelectReg,0)); 
047E:  MOVF   4F,W
047F:  MOVWF  64
0480:  MOVF   0B,W
0481:  MOVWF  20
0482:  BCF    0B.7
0483:  MOVLW  04
0484:  BSF    03.5
0485:  MOVWF  1B
0486:  BCF    03.5
0487:  MOVF   4F,W
0488:  BSF    03.5
0489:  MOVWF  1A
048A:  BCF    1C.7
048B:  BSF    1C.2
048C:  MOVLW  55
048D:  MOVWF  1D
048E:  MOVLW  AA
048F:  MOVWF  1D
0490:  BSF    1C.1
0491:  BTFSC  1C.1
0492:  GOTO   491
0493:  BCF    1C.2
0494:  BCF    03.5
0495:  MOVF   20,W
0496:  IORWF  0B,F
.................... 							delay_us(10); 
0497:  MOVLW  02
0498:  MOVWF  20
0499:  DECFSZ 20,F
049A:  GOTO   499
049B:  GOTO   49C
049C:  NOP
.................... 							write_eeprom(Group_815Store,make8(GroupSelectReg,1)); 
049D:  MOVF   50,W
049E:  MOVWF  64
049F:  MOVF   0B,W
04A0:  MOVWF  20
04A1:  BCF    0B.7
04A2:  MOVLW  05
04A3:  BSF    03.5
04A4:  MOVWF  1B
04A5:  BCF    03.5
04A6:  MOVF   50,W
04A7:  BSF    03.5
04A8:  MOVWF  1A
04A9:  BCF    1C.7
04AA:  BSF    1C.2
04AB:  MOVLW  55
04AC:  MOVWF  1D
04AD:  MOVLW  AA
04AE:  MOVWF  1D
04AF:  BSF    1C.1
04B0:  BTFSC  1C.1
04B1:  GOTO   4B0
04B2:  BCF    1C.2
04B3:  BCF    03.5
04B4:  MOVF   20,W
04B5:  IORWF  0B,F
....................  							delay_us(10); 
04B6:  MOVLW  02
04B7:  MOVWF  20
04B8:  DECFSZ 20,F
04B9:  GOTO   4B8
04BA:  GOTO   4BB
04BB:  NOP
.................... 							break; 
04BC:  GOTO   50C
.................... 						} 
.................... 					case 16: 
.................... 						{ 
.................... 							bit_set(GroupSelectReg,gindex); 
04BD:  CLRF   23
04BE:  MOVLW  01
04BF:  MOVWF  22
04C0:  MOVF   51,W
04C1:  MOVWF  20
04C2:  BTFSC  03.2
04C3:  GOTO   4C9
04C4:  BCF    03.0
04C5:  RLF    22,F
04C6:  RLF    23,F
04C7:  DECFSZ 20,F
04C8:  GOTO   4C4
04C9:  MOVF   22,W
04CA:  IORWF  4F,F
04CB:  MOVF   23,W
04CC:  IORWF  50,F
.................... 							write_eeprom(Group_07Store  ,make8(GroupSelectReg,0)); 
04CD:  MOVF   4F,W
04CE:  MOVWF  64
04CF:  MOVF   0B,W
04D0:  MOVWF  20
04D1:  BCF    0B.7
04D2:  MOVLW  04
04D3:  BSF    03.5
04D4:  MOVWF  1B
04D5:  BCF    03.5
04D6:  MOVF   4F,W
04D7:  BSF    03.5
04D8:  MOVWF  1A
04D9:  BCF    1C.7
04DA:  BSF    1C.2
04DB:  MOVLW  55
04DC:  MOVWF  1D
04DD:  MOVLW  AA
04DE:  MOVWF  1D
04DF:  BSF    1C.1
04E0:  BTFSC  1C.1
04E1:  GOTO   4E0
04E2:  BCF    1C.2
04E3:  BCF    03.5
04E4:  MOVF   20,W
04E5:  IORWF  0B,F
.................... 							delay_us(10); 
04E6:  MOVLW  02
04E7:  MOVWF  20
04E8:  DECFSZ 20,F
04E9:  GOTO   4E8
04EA:  GOTO   4EB
04EB:  NOP
.................... 							write_eeprom(Group_815Store,make8(GroupSelectReg,1)); 
04EC:  MOVF   50,W
04ED:  MOVWF  64
04EE:  MOVF   0B,W
04EF:  MOVWF  20
04F0:  BCF    0B.7
04F1:  MOVLW  05
04F2:  BSF    03.5
04F3:  MOVWF  1B
04F4:  BCF    03.5
04F5:  MOVF   50,W
04F6:  BSF    03.5
04F7:  MOVWF  1A
04F8:  BCF    1C.7
04F9:  BSF    1C.2
04FA:  MOVLW  55
04FB:  MOVWF  1D
04FC:  MOVLW  AA
04FD:  MOVWF  1D
04FE:  BSF    1C.1
04FF:  BTFSC  1C.1
0500:  GOTO   4FF
0501:  BCF    1C.2
0502:  BCF    03.5
0503:  MOVF   20,W
0504:  IORWF  0B,F
....................  							delay_us(10); 
0505:  MOVLW  02
0506:  MOVWF  20
0507:  DECFSZ 20,F
0508:  GOTO   507
0509:  GOTO   50A
050A:  NOP
.................... 							break; 
050B:  GOTO   50C
.................... 						} 
.................... 					 
.................... 					default: break; 
....................  
.................... 				} 
.................... 				break ; 
050C:  GOTO   5FD
.................... 		} 
.................... 		case 34:    // store  short  aress  
.................... 		{ 
.................... 			if(databyte <64) 
050D:  MOVF   4B,W
050E:  SUBLW  3F
050F:  BTFSS  03.0
0510:  GOTO   530
.................... 			{ 
.................... 					lampid = databyte; 
0511:  MOVF   4B,W
0512:  MOVWF  5A
.................... 					write_eeprom(ShortAddressStore ,lampid); 
0513:  MOVF   0B,W
0514:  MOVWF  20
0515:  BCF    0B.7
0516:  MOVLW  03
0517:  BSF    03.5
0518:  MOVWF  1B
0519:  BCF    03.5
051A:  MOVF   5A,W
051B:  BSF    03.5
051C:  MOVWF  1A
051D:  BCF    1C.7
051E:  BSF    1C.2
051F:  MOVLW  55
0520:  MOVWF  1D
0521:  MOVLW  AA
0522:  MOVWF  1D
0523:  BSF    1C.1
0524:  BTFSC  1C.1
0525:  GOTO   524
0526:  BCF    1C.2
0527:  BCF    03.5
0528:  MOVF   20,W
0529:  IORWF  0B,F
.................... 					delay_us(10); 
052A:  MOVLW  02
052B:  MOVWF  20
052C:  DECFSZ 20,F
052D:  GOTO   52C
052E:  GOTO   52F
052F:  NOP
.................... 			} 
.................... 		 
.................... 			break;		 
0530:  GOTO   5FD
.................... 		} 
.................... 		case 35:    // write  DTR  
.................... 		{ 
.................... 					DTR = databyte;	 
0531:  MOVF   4B,W
0532:  MOVWF  57
.................... 					DTR_Ready =1; 
0533:  MOVLW  01
0534:  MOVWF  59
.................... 					break; 
0535:  GOTO   5FD
.................... 		} 
.................... 		case 36:    // write  DTR  to  adress  location  in data  byte  
.................... 		{ 
.................... 					 
.................... 				DwriteLocation = databyte;	 
0536:  MOVF   4B,W
0537:  MOVWF  58
.................... 				if(DTR_Ready ==1 && DwriteLocation<33 ) 
0538:  DECFSZ 59,W
0539:  GOTO   55B
053A:  MOVF   58,W
053B:  SUBLW  20
053C:  BTFSS  03.0
053D:  GOTO   55B
.................... 				{ 
.................... 					DTR_Ready =0; 
053E:  CLRF   59
.................... 					write_eeprom(DwriteLocation,DTR); 
053F:  MOVF   0B,W
0540:  MOVWF  20
0541:  BCF    0B.7
0542:  MOVF   58,W
0543:  BSF    03.5
0544:  MOVWF  1B
0545:  BCF    03.5
0546:  MOVF   57,W
0547:  BSF    03.5
0548:  MOVWF  1A
0549:  BCF    1C.7
054A:  BSF    1C.2
054B:  MOVLW  55
054C:  MOVWF  1D
054D:  MOVLW  AA
054E:  MOVWF  1D
054F:  BSF    1C.1
0550:  BTFSC  1C.1
0551:  GOTO   550
0552:  BCF    1C.2
0553:  BCF    03.5
0554:  MOVF   20,W
0555:  IORWF  0B,F
.................... 					DELAY_US(20); 
0556:  MOVLW  06
0557:  MOVWF  20
0558:  DECFSZ 20,F
0559:  GOTO   558
055A:  NOP
.................... 				} 
.................... 			init_from_eeprom(); 
055B:  CALL   15F
.................... 			break; 
055C:  GOTO   5FD
.................... 		} 
.................... 		case 37:    // Read  DTR  to  adress  location  in data  byte  
.................... 		{ 
.................... 				tx_buffer[2]=lampid;tx_buffer[1]=DTR; txmit(2,2);  /////////priority changed 
055D:  MOVF   5A,W
055E:  MOVWF  41
055F:  MOVF   57,W
0560:  MOVWF  40
0561:  MOVLW  02
0562:  MOVWF  64
0563:  MOVWF  65
0564:  CALL   2FA
.................... 				break;			 
0565:  GOTO   5FD
.................... 		} 
.................... 		case 38:    // Read  eeprom  and  store  in dtr   to  adress  location  in data  byte  
.................... 		{ 
.................... 				DwriteLocation = databyte;	 
0566:  MOVF   4B,W
0567:  MOVWF  58
.................... 				if( DwriteLocation<33 ) 
0568:  MOVF   58,W
0569:  SUBLW  20
056A:  BTFSS  03.0
056B:  GOTO   574
.................... 				{ 
.................... 					DTR=Read_eeprom(DwriteLocation); 
056C:  MOVF   58,W
056D:  BSF    03.5
056E:  MOVWF  1B
056F:  BCF    1C.7
0570:  BSF    1C.0
0571:  MOVF   1A,W
0572:  BCF    03.5
0573:  MOVWF  57
.................... 				}	 
.................... 				break;				 
0574:  GOTO   5FD
.................... 		} 
.................... 		case 39:							// Query current device power level 
.................... 		{ 
.................... 			tx_buffer[2]=lampid;tx_buffer[1]=Read_eeprom(0);  
0575:  MOVF   5A,W
0576:  MOVWF  41
0577:  BSF    03.5
0578:  CLRF   1B
0579:  BCF    1C.7
057A:  BSF    1C.0
057B:  MOVF   1A,W
057C:  BCF    03.5
057D:  MOVWF  40
.................... 	    	txmit(2,2);		 
057E:  MOVLW  02
057F:  MOVWF  64
0580:  MOVWF  65
0581:  CALL   2FA
.................... 			break; 
0582:  GOTO   5FD
....................  
.................... 		} 
.................... 		case 49: //////////////// case for device type query ///////////////// 
.................... 		{ 
.................... 			tx_buffer[2]=lampid;tx_buffer[1]=device_type;  
0583:  MOVF   5A,W
0584:  MOVWF  41
0585:  MOVLW  07
0586:  MOVWF  40
.................... 			txmit(2,2);			 
0587:  MOVLW  02
0588:  MOVWF  64
0589:  MOVWF  65
058A:  CALL   2FA
.................... 			break; 
058B:  GOTO   5FD
....................  
.................... 		} 
.................... 		case 50: //////////////// case for first group secion query ///////////////// 
.................... 		{ 
.................... 			tx_buffer[2]=lampid;tx_buffer[1]=Read_eeprom(7);  
058C:  MOVF   5A,W
058D:  MOVWF  41
058E:  MOVLW  07
058F:  BSF    03.5
0590:  MOVWF  1B
0591:  BCF    1C.7
0592:  BSF    1C.0
0593:  MOVF   1A,W
0594:  BCF    03.5
0595:  MOVWF  40
.................... 			txmit(2,2);			 
0596:  MOVLW  02
0597:  MOVWF  64
0598:  MOVWF  65
0599:  CALL   2FA
.................... 			break; 
059A:  GOTO   5FD
....................  
.................... 		} 
.................... 		case 51: //////////////// case for second group secion query ///////////////// 
.................... 		{ 
.................... 			tx_buffer[2]=lampid;tx_buffer[1]=Read_eeprom(8);  
059B:  MOVF   5A,W
059C:  MOVWF  41
059D:  MOVLW  08
059E:  BSF    03.5
059F:  MOVWF  1B
05A0:  BCF    1C.7
05A1:  BSF    1C.0
05A2:  MOVF   1A,W
05A3:  BCF    03.5
05A4:  MOVWF  40
.................... 			txmit(2,2);			 
05A5:  MOVLW  02
05A6:  MOVWF  64
05A7:  MOVWF  65
05A8:  CALL   2FA
.................... 			break; 
05A9:  GOTO   5FD
....................  
.................... 		} 
.................... 		case 42: //////////////// setting max level ///////////////// 
.................... 		{ 
.................... 			MaximumLevel=databyte; 
05AA:  MOVF   4B,W
05AB:  MOVWF  55
.................... 			write_eeprom(MaximumLevelStore,MaximumLevel); 
05AC:  MOVF   0B,W
05AD:  MOVWF  20
05AE:  BCF    0B.7
05AF:  MOVLW  02
05B0:  BSF    03.5
05B1:  MOVWF  1B
05B2:  BCF    03.5
05B3:  MOVF   55,W
05B4:  BSF    03.5
05B5:  MOVWF  1A
05B6:  BCF    1C.7
05B7:  BSF    1C.2
05B8:  MOVLW  55
05B9:  MOVWF  1D
05BA:  MOVLW  AA
05BB:  MOVWF  1D
05BC:  BSF    1C.1
05BD:  BTFSC  1C.1
05BE:  GOTO   5BD
05BF:  BCF    1C.2
05C0:  BCF    03.5
05C1:  MOVF   20,W
05C2:  IORWF  0B,F
.................... 			delay_us(10);			 
05C3:  MOVLW  02
05C4:  MOVWF  20
05C5:  DECFSZ 20,F
05C6:  GOTO   5C5
05C7:  GOTO   5C8
05C8:  NOP
.................... 			break; 
05C9:  GOTO   5FD
....................  
.................... 		} 
.................... 		case 43: //////////////// setting min level ///////////////// 
.................... 		{ 
.................... 			MinimumLevel=databyte; 
05CA:  MOVF   4B,W
05CB:  MOVWF  54
.................... 			write_eeprom(MinimumLevelStore,MinimumLevel); 
05CC:  MOVF   0B,W
05CD:  MOVWF  20
05CE:  BCF    0B.7
05CF:  MOVLW  01
05D0:  BSF    03.5
05D1:  MOVWF  1B
05D2:  BCF    03.5
05D3:  MOVF   54,W
05D4:  BSF    03.5
05D5:  MOVWF  1A
05D6:  BCF    1C.7
05D7:  BSF    1C.2
05D8:  MOVLW  55
05D9:  MOVWF  1D
05DA:  MOVLW  AA
05DB:  MOVWF  1D
05DC:  BSF    1C.1
05DD:  BTFSC  1C.1
05DE:  GOTO   5DD
05DF:  BCF    1C.2
05E0:  BCF    03.5
05E1:  MOVF   20,W
05E2:  IORWF  0B,F
.................... 			delay_us(10);		 
05E3:  MOVLW  02
05E4:  MOVWF  20
05E5:  DECFSZ 20,F
05E6:  GOTO   5E5
05E7:  GOTO   5E8
05E8:  NOP
.................... 			break; 
05E9:  GOTO   5FD
.................... 		} 
.................... 		case 48:		// PWM Restart operation		// USE WITH CARE		 
.................... 		{ 
.................... 			ECCPASE=0;		 
05EA:  BCF    17.7
.................... 			break; 
05EB:  GOTO   5FD
.................... 		} 
.................... 		case 52:	// Read the no. of times system was shutdown permanently 
.................... 		{ 
.................... 			tx_buffer[2]=lampid;tx_buffer[1]=Read_eeprom(SystemFailureRateStore);  
05EC:  MOVF   5A,W
05ED:  MOVWF  41
05EE:  MOVLW  19
05EF:  BSF    03.5
05F0:  MOVWF  1B
05F1:  BCF    1C.7
05F2:  BSF    1C.0
05F3:  MOVF   1A,W
05F4:  BCF    03.5
05F5:  MOVWF  40
.................... 			txmit(2,2); 
05F6:  MOVLW  02
05F7:  MOVWF  64
05F8:  MOVWF  65
05F9:  CALL   2FA
.................... 			break; 
05FA:  GOTO   5FD
.................... 		} 
....................  
.................... 		default: 
.................... 		{ 
.................... 			command_st=1; 
05FB:  MOVLW  01
05FC:  MOVWF  45
.................... 			break; 
.................... 		} 
.................... 	} 
.................... 	if(command_st==0) 
05FD:  MOVF   45,F
05FE:  BTFSS  03.2
05FF:  GOTO   616
.................... 	{ 		 
.................... 		  write_eeprom(PowerOnLevelStore,duty);		 
0600:  MOVF   0B,W
0601:  MOVWF  20
0602:  BCF    0B.7
0603:  BSF    03.5
0604:  CLRF   1B
0605:  BCF    03.5
0606:  MOVF   38,W
0607:  BSF    03.5
0608:  MOVWF  1A
0609:  BCF    1C.7
060A:  BSF    1C.2
060B:  MOVLW  55
060C:  MOVWF  1D
060D:  MOVLW  AA
060E:  MOVWF  1D
060F:  BSF    1C.1
0610:  BTFSC  1C.1
0611:  GOTO   610
0612:  BCF    1C.2
0613:  BCF    03.5
0614:  MOVF   20,W
0615:  IORWF  0B,F
.................... 	} 
.................... 	return; 
.................... } 
....................  
.................... void lamp_on() 
.................... {	 
.................... 	SetDimmLevel(duty); 
*
025A:  MOVF   38,W
025B:  MOVWF  64
025C:  CALL   20A
.................... 	l_st=1; 
025D:  MOVLW  01
025E:  MOVWF  44
.................... 	return; 
025F:  RETURN
.................... } 
.................... 	 
.................... void lamp_off() 
.................... {	 
.................... 	SetDimmLevel(0);	 
*
0256:  CLRF   64
0257:  CALL   20A
.................... 	l_st=0; 
0258:  CLRF   44
.................... 	return; 
0259:  RETURN
.................... } 
....................  
....................  
.................... 	 
.................... void SetDimmLevel(unsigned int dimPesentage) 
.................... { 
.................... 	if(dimPesentage >= MaximumLevel) 
*
020A:  MOVF   55,W
020B:  SUBWF  64,W
020C:  BTFSS  03.0
020D:  GOTO   211
.................... 		{ 
.................... 			dimPesentage = MaximumLevel; 
020E:  MOVF   55,W
020F:  MOVWF  64
.................... 		} 
0210:  GOTO   217
.................... 	else if(dimPesentage <= MinimumLevel) 
0211:  MOVF   64,W
0212:  SUBWF  54,W
0213:  BTFSS  03.0
0214:  GOTO   217
.................... 		{ 
.................... 			dimPesentage = MinimumLevel; 
0215:  MOVF   54,W
0216:  MOVWF  64
.................... 		} 
.................... 	 
.................... 	if(dimPesentage <=MinimumLevel) 
0217:  MOVF   64,W
0218:  SUBWF  54,W
0219:  BTFSS  03.0
021A:  GOTO   220
.................... 		{ 
.................... 			output_low(pin_c2); 
021B:  BSF    03.5
021C:  BCF    07.2
021D:  BCF    03.5
021E:  BCF    07.2
.................... 		} 
021F:  GOTO   224
.................... 	else 
.................... 		{ 
.................... 			output_high(pin_c2); 
0220:  BSF    03.5
0221:  BCF    07.2
0222:  BCF    03.5
0223:  BSF    07.2
.................... 		} 
....................  
.................... 	if(dimPesentage<95) 
0224:  MOVF   64,W
0225:  SUBLW  5E
0226:  BTFSS  03.0
0227:  GOTO   22B
.................... 	{ 
.................... 		Power =dimPesentage; 
0228:  CLRF   3A
0229:  MOVF   64,W
022A:  MOVWF  39
.................... 	} 
.................... 	if(dimPesentage>=95) 
022B:  MOVF   64,W
022C:  SUBLW  5E
022D:  BTFSC  03.0
022E:  GOTO   233
.................... 	{ 
.................... 		Power =1023; 
022F:  MOVLW  03
0230:  MOVWF  3A
0231:  MOVLW  FF
0232:  MOVWF  39
.................... 	} 
.................... 	if(Power > 1020){Power =1023;} 
0233:  MOVF   3A,W
0234:  SUBLW  02
0235:  BTFSC  03.0
0236:  GOTO   242
0237:  XORLW  FF
0238:  BTFSS  03.2
0239:  GOTO   23E
023A:  MOVF   39,W
023B:  SUBLW  FC
023C:  BTFSC  03.0
023D:  GOTO   242
023E:  MOVLW  03
023F:  MOVWF  3A
0240:  MOVLW  FF
0241:  MOVWF  39
.................... 	set_pwm1_duty(Power); 
0242:  MOVF   3A,W
0243:  MOVWF  22
0244:  MOVF   39,W
0245:  MOVWF  21
0246:  RRF    22,F
0247:  RRF    21,F
0248:  RRF    22,F
0249:  RRF    21,F
024A:  RRF    22,F
024B:  MOVF   21,W
024C:  MOVWF  13
024D:  RRF    22,F
024E:  RRF    22,W
024F:  ANDLW  30
0250:  MOVWF  20
0251:  MOVF   15,W
0252:  ANDLW  CF
0253:  IORWF  20,W
0254:  MOVWF  15
0255:  RETURN
.................... 	} 
....................  
....................  
.................... void init_from_eeprom(void) 
.................... { 
.................... GroupSelectReg = MAKE16(read_EEPROM (Group_815Store ),read_EEPROM (Group_07Store));	 
*
015F:  MOVLW  05
0160:  BSF    03.5
0161:  MOVWF  1B
0162:  BCF    1C.7
0163:  BSF    1C.0
0164:  MOVF   1A,W
0165:  BCF    03.5
0166:  MOVWF  64
0167:  MOVLW  04
0168:  BSF    03.5
0169:  MOVWF  1B
016A:  BCF    1C.7
016B:  BSF    1C.0
016C:  MOVF   1A,W
016D:  BCF    03.5
016E:  MOVWF  65
016F:  MOVF   64,W
0170:  MOVWF  50
0171:  MOVF   65,W
0172:  MOVWF  4F
.................... delay_us(10); 
0173:  MOVLW  02
0174:  MOVWF  20
0175:  DECFSZ 20,F
0176:  GOTO   175
0177:  GOTO   178
0178:  NOP
.................... PowerOnLevel 		= read_EEPROM (PowerOnLevelStore); 
0179:  BSF    03.5
017A:  CLRF   1B
017B:  BCF    1C.7
017C:  BSF    1C.0
017D:  MOVF   1A,W
017E:  BCF    03.5
017F:  MOVWF  56
.................... delay_us(10);     
0180:  MOVLW  02
0181:  MOVWF  20
0182:  DECFSZ 20,F
0183:  GOTO   182
0184:  GOTO   185
0185:  NOP
.................... MinimumLevel		= read_EEPROM ( MinimumLevelStore );    
0186:  MOVLW  01
0187:  BSF    03.5
0188:  MOVWF  1B
0189:  BCF    1C.7
018A:  BSF    1C.0
018B:  MOVF   1A,W
018C:  BCF    03.5
018D:  MOVWF  54
.................... delay_us(10);       	 
018E:  MOVLW  02
018F:  MOVWF  20
0190:  DECFSZ 20,F
0191:  GOTO   190
0192:  GOTO   193
0193:  NOP
.................... MaximumLevel 		= read_EEPROM ( MaximumLevelStore);  
0194:  MOVLW  02
0195:  BSF    03.5
0196:  MOVWF  1B
0197:  BCF    1C.7
0198:  BSF    1C.0
0199:  MOVF   1A,W
019A:  BCF    03.5
019B:  MOVWF  55
.................... delay_us(10);  	 
019C:  MOVLW  02
019D:  MOVWF  20
019E:  DECFSZ 20,F
019F:  GOTO   19E
01A0:  GOTO   1A1
01A1:  NOP
.................... lampid 				= read_EEPROM ( ShortAddressStore ); 
01A2:  MOVLW  03
01A3:  BSF    03.5
01A4:  MOVWF  1B
01A5:  BCF    1C.7
01A6:  BSF    1C.0
01A7:  MOVF   1A,W
01A8:  BCF    03.5
01A9:  MOVWF  5A
.................... delay_us(10); 
01AA:  MOVLW  02
01AB:  MOVWF  20
01AC:  DECFSZ 20,F
01AD:  GOTO   1AC
01AE:  GOTO   1AF
01AF:  NOP
.................... zoneid=read_EEPROM(zoneidstore); 
01B0:  MOVLW  20
01B1:  BSF    03.5
01B2:  MOVWF  1B
01B3:  BCF    1C.7
01B4:  BSF    1C.0
01B5:  MOVF   1A,W
01B6:  BCF    03.5
01B7:  MOVWF  47
.................... delay_us(10); 
01B8:  MOVLW  02
01B9:  MOVWF  20
01BA:  DECFSZ 20,F
01BB:  GOTO   1BA
01BC:  GOTO   1BD
01BD:  NOP
.................... failure_count=read_EEPROM(SystemFailureRateStore); 
01BE:  MOVLW  19
01BF:  BSF    03.5
01C0:  MOVWF  1B
01C1:  BCF    1C.7
01C2:  BSF    1C.0
01C3:  MOVF   1A,W
01C4:  BCF    03.5
01C5:  MOVWF  63
.................... delay_us(10); 
01C6:  MOVLW  02
01C7:  MOVWF  20
01C8:  DECFSZ 20,F
01C9:  GOTO   1C8
01CA:  GOTO   1CB
01CB:  NOP
01CC:  RETURN
.................... } 
....................  
....................  

Configuration Fuses:
   Word  1: 33EC   INTRC_IO WDT PUT MCLR NOPROTECT NOCPD BROWNOUT NOIESO NOFCMEN

ROM data:
002100: 0064 0000 0064 000A 0001 0000 0000 0014 
002108: 001E 0032 0046 005A 0064 0023 0028 002D 
002110: 004B 0019 003C 0041 005F 0064 

002120: 00D4 
